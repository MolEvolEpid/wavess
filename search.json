[{"path":"https://molevolepid.github.io/wavess/articles/analyze_output.html","id":"run-wavess","dir":"Articles","previous_headings":"","what":"Run wavess","title":"Analyze wavess output","text":"First, let’s load relevant libraries, set default plotting theme, run wavess including selective pressures. ’re going set seed reproducibility. details input running wavess, please see respective vignettes. (vignette(\"prepare_input_data\") vignette(\"run_wavess\")). haven’t checked vignettes first, sure least run create_python_venv() function prior running code, else ’ll get error telling .","code":"library(wavess) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) library(tidyr) library(ape) #>  #> Attaching package: 'ape' #> The following object is masked from 'package:dplyr': #>  #>     where library(phangorn) library(ggtree) #> ggtree v3.16.0 Learn more at https://yulab-smu.top/contribution-tree-data/ #>  #> Please cite: #>  #> Guangchuang Yu, David Smith, Huachen Zhu, Yi Guan, Tommy Tsan-Yuk Lam. #> ggtree: an R package for visualization and annotation of phylogenetic #> trees with their covariates and other associated data. Methods in #> Ecology and Evolution. 2017, 8(1):28-36. doi:10.1111/2041-210X.12628 #>  #> Attaching package: 'ggtree' #> The following object is masked from 'package:ape': #>  #>     rotate #> The following object is masked from 'package:tidyr': #>  #>     expand  set.seed(1234)  theme_set(theme_classic() +   theme(strip.background = element_rect(color = \"white\")))  # if needed create_python_venv() #> Using Python: /usr/bin/python3.12 #> Creating virtual environment 'r-wavess' ... #> + /usr/bin/python3.12 -m venv /home/runner/.virtualenvs/r-wavess #> Done! #> Installing packages: pip, wheel, setuptools #> + /home/runner/.virtualenvs/r-wavess/bin/python -m pip install --upgrade pip wheel setuptools #> Installing packages: numpy #> + /home/runner/.virtualenvs/r-wavess/bin/python -m pip install --upgrade --no-user numpy #> Virtual environment 'r-wavess' successfully created. #> Using virtual environment 'r-wavess' ... #> + /home/runner/.virtualenvs/r-wavess/bin/python -m pip install --upgrade --no-user scipy #> Installation of scipy version 1.15.3 complete.  pop <- define_growth_curve(n_gens = 500) samp <- define_sampling_scheme(sampling_frequency_active = 30, max_samp_active = 50) %>%   filter(day <= 500)  founder_ref <- extract_seqs(hxb2_cons_founder,   founder = \"B.US.2011.DEMB11US006.KC473833\",   ref = \"CON_B(1295)\",   start = 6225, end = 7787 ) gp120 <- slice_aln(hxb2_cons_founder, 6225, 7787) epi_probs <- get_epitope_frequencies(env_features$Position) ref_founder_map <- map_ref_founder(gp120,   ref = \"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\",   founder = \"B.US.2011.DEMB11US006.KC473833\" ) epitope_locations <- sample_epitopes(epi_probs,   ref_founder_map = ref_founder_map ) #> 12 resamples required  wavess_out <- run_wavess(   inf_pop_size = pop,   samp_scheme = samp,   founder_seqs = rep(founder_ref$founder, 10),   conserved_sites = founder_conserved_sites,   ref_seq = founder_ref$ref,   epitope_locations = epitope_locations,   seed = 1234 )"},{"path":"https://molevolepid.github.io/wavess/articles/analyze_output.html","id":"plotting-counts","dir":"Articles","previous_headings":"","what":"Plotting counts","title":"Analyze wavess output","text":"various counts mean fitness values plotted time:","code":"wavess_out$counts |>   pivot_longer(!generation) |>   ggplot(aes(x = generation, y = value)) +   facet_wrap(~name, scales = \"free\") +   geom_line()"},{"path":"https://molevolepid.github.io/wavess/articles/analyze_output.html","id":"diversity-and-divergence","dir":"Articles","previous_headings":"","what":"Diversity and divergence","title":"Analyze wavess output","text":"Within-generation diversity divergence founder sequence across time can computed plotted follows (reference calculations ): can seen, diversity founder0 generation 0 NaN. one sampled sequence timepoints, diversity computed.","code":"gens <- gsub(\"gen|_.*\", \"\", labels(wavess_out$seqs_active)) (div_metrics <- calc_div_metrics(wavess_out$seqs_active, \"founder0\", gens) |>   filter(!is.na(diversity))) #> # A tibble: 17 × 3 #>    gen   diversity divergence #>    <chr>     <dbl>      <dbl> #>  1 0       0         0        #>  2 30      0.00104   0.000532 #>  3 60      0.00179   0.000918 #>  4 90      0.00281   0.00144  #>  5 120     0.00544   0.00319  #>  6 150     0.00660   0.00419  #>  7 180     0.00723   0.00478  #>  8 210     0.00769   0.00515  #>  9 240     0.00893   0.00585  #> 10 270     0.0116    0.00717  #> 11 300     0.0123    0.00766  #> 12 330     0.0123    0.00864  #> 13 360     0.0133    0.00896  #> 14 390     0.0149    0.00934  #> 15 420     0.0127    0.00846  #> 16 450     0.0121    0.00886  #> 17 480     0.0158    0.0108 div_metrics |>   mutate(gen = as.numeric(gen)) |>   pivot_longer(!gen) |>   ggplot(aes(x = gen, y = value)) +   facet_grid(~name) +   geom_line()"},{"path":"https://molevolepid.github.io/wavess/articles/analyze_output.html","id":"phylogeny","dir":"Articles","previous_headings":"","what":"Phylogeny","title":"Analyze wavess output","text":"HIGHLY recommend using maximum-likelihood (Bayesian) tree-building algorithm outside R IQ-TREE tree-based analyses simulated sequences. said, sometimes nice, like , build quick tree get sense output simulations looks like. way quickly build tree R using ape generate neighbor-joining tree phangorn estimate branch lengths using maximum likelihood. (Note can also modify code estimate full maximum-likelihood tree R deleting rearrangement = \"none\", just prepared take long time run - longer take run IQ-TREE.)","code":"seqs_active <- wavess_out$seqs_active[grepl(\"founder0|gen30|gen90|gen150|gen480\", labels(wavess_out$seqs_active)), ] pml_out <- pml_bb(seqs_active,   start = bionj(dist.dna(seqs_active, model = \"TN93\")),   model = \"GTR+I+R(4)\", rearrangement = \"none\" ) #> optimize edge weights:  -7685.642 --> -7634.551  #> optimize rate matrix:  -7634.551 --> -7348.021  #> optimize invariant sites:  -7348.021 --> -7095.98  #> optimize free rate parameters:  -7095.98 --> -6424.452  #> optimize edge weights:  -6424.452 --> -6420.2  #> optimize rate matrix:  -6420.2 --> -6419.492  #> optimize invariant sites:  -6419.492 --> -6419.492  #> optimize free rate parameters:  -6419.492 --> -6419.288  #> optimize edge weights:  -6419.288 --> -6419.286  #> optimize rate matrix:  -6419.286 --> -6419.284  #> optimize invariant sites:  -6419.284 --> -6419.284  #> optimize free rate parameters:  -6419.284 --> -6419.282  #> optimize edge weights:  -6419.282 --> -6419.282  #> optimize rate matrix:  -6419.282 --> -6419.282  #> optimize invariant sites:  -6419.282 --> -6419.282  #> optimize free rate parameters:  -6419.282 --> -6419.282  #> optimize edge weights:  -6419.282 --> -6419.282  #> optimize rate matrix:  -6419.282 --> -6419.282  #> optimize invariant sites:  -6419.282 --> -6419.282  #> optimize free rate parameters:  -6419.282 --> -6419.282  #> optimize edge weights:  -6419.282 --> -6419.282  tr <- root(pml_out$tree, \"founder0\", resolve.root = TRUE) gens <- gsub(\"gen|_.*\", \"\", tr$tip.label) names(gens) <- tr$tip.label ggtree(tr) +   geom_tippoint(aes(col = factor(c(gens, rep(NA, Nnode(tr))), levels = c(\"founder0\", sort(unique(as.numeric(gens))))))) +   scale_color_brewer(palette = \"Set1\") +   geom_treescale() +   labs(col = \"Generation\") #> Warning in unique(as.numeric(gens)): NAs introduced by coercion"},{"path":"https://molevolepid.github.io/wavess/articles/analyze_output.html","id":"phylogeny-summary-statistics","dir":"Articles","previous_headings":"","what":"Phylogeny summary statistics","title":"Analyze wavess output","text":"Using tree generated , provide functionality compute phylogenetic summary statistics: mean leaf depth, Sackin index normalized number tree tips. mean branch length, mean internal branch length, mean external branch length. transition score phylogeny tips labeled timepoints, normalized . number timepoints. mean per-generation divergence (root--tip distance) diversity (tip--tip distance). slope divergence diversity time. Many tree statistics can calculated using treebalance package. Note summary statistics can reliably compared trees derived sampling scheme, .e. number samples taken time points post-infection.","code":"calc_tr_stats(tr, factor(gens, levels = c(\"founder0\", sort(unique(as.numeric(gens)))))) #> Warning in unique(as.numeric(gens)): NAs introduced by coercion #> Warning in FUN(X[[i]], ...): Generation founder0 has only one tip, cannot #> calculate diversity. #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `timepoint = as.numeric(as.character(.data$timepoint))`. #> Caused by warning: #> ! NAs introduced by coercion #> # A tibble: 9 × 2 #>   stat_name        stat_value #>   <chr>                 <dbl> #> 1 mean_leaf_depth  24.3       #> 2 mean_bl           0.00147   #> 3 mean_int_bl       0.00118   #> 4 mean_ext_bl       0.00175   #> 5 mean_divergence   0.00766   #> 6 mean_diversity    0.0143    #> 7 divergence_slope  0.0000480 #> 8 diversity_slope   0.0000673 #> 9 transition_score 10.6"},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"install-and-load-wavess","dir":"Articles","previous_headings":"","what":"Install and load wavess","title":"Prepare input data","text":"First, need install (needed) load wavess library, well others, set plotting theme seed: also load example data using vignette. example data related HIV gp120 protein. Please note default parameters run_wavess() also based example. particular, include following example data package: hxb2_cons_founder: alignment ape::DNAbin format includes HIV full-genome sequence HXB2 reference sequence, consensus sequence, example founder sequence. hiv_mut_rates: per-site per-day rates change specific nucleotides hiv_env_flt_2022: first 10 sequences filtered HIV ENV alignment downloaded LANL HIV sequence database, ape::DNAbin format. Feel free download entire alignment ’d like. conserved_sites: vector conserved sites example founder sequence. details . env_features: tibble binding, contact, neutralization features HIV ENV LANL HIV immunology database. can check documentation datasets details. want load data, can use ape::read.dna() ape::read.FASTA() load alignment files readr::read_delim() load delimited files.","code":"# install.packages(\"remotes\") # remotes::install_github(\"MolEvolEpid/wavess\") # install.packages(\"ggplot2\")  library(wavess) library(readr) library(tibble) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(tidyr) library(ggplot2) library(ape) #>  #> Attaching package: 'ape' #> The following object is masked from 'package:dplyr': #>  #>     where  theme_set(theme_classic())  # set seed set.seed(1234)"},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"required-run_wavess-inputs","dir":"Articles","previous_headings":"","what":"Required run_wavess() inputs","title":"Prepare input data","text":"three required inputs run_waves() data frame infected cell population size generation, data frame including days sample many sequences sample (samp_scheme), vector founder sequence(s) character string format (founder_seqs). section, introduce functions can help generate inputs. Note , general, inputs units generations units days. made decisions mainly based information readily available literature related parameter value.","code":""},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"define-active-cell","dir":"Articles","previous_headings":"Required run_wavess() inputs","what":"Define active cell growth","title":"Prepare input data","text":"run_wavess() requires inf_pop_size data frame input row generation following columns: generation: generation simulated (must consecutive whole numbers starting 0) active_cell_count: Number active infected cells generation can create data frame , also provide helper function generate : define_growth_curve(). arguments function defaults, can run: generate infected cell population size following logistic growth curve. default, starting population size (n0) 10, carrying capacity (carry_cap) 2000, maximum growth rate (max_growth_rate) 0.3, simulation run maximum 5000 generations (n_gen). defaults can changed altering input parameters function. example allow simulation run longer (long sequences sampled): ’d like write file: couple notes: number founders must equal initial population size.  can visualize active cell dynamics time using following code:","code":"define_growth_curve() #> # A tibble: 5,001 × 2 #>    generation active_cell_count #>         <dbl>             <dbl> #>  1          0                10 #>  2          1                13 #>  3          2                17 #>  4          3                22 #>  5          4                29 #>  6          5                37 #>  7          6                48 #>  8          7                62 #>  9          8                80 #> 10          9               103 #> # ℹ 4,991 more rows (inf_pop_size <- define_growth_curve(n_gen = 10000)) #> # A tibble: 10,001 × 2 #>    generation active_cell_count #>         <dbl>             <dbl> #>  1          0                10 #>  2          1                13 #>  3          2                17 #>  4          3                22 #>  5          4                29 #>  6          5                37 #>  7          6                48 #>  8          7                62 #>  9          8                80 #> 10          9               103 #> # ℹ 9,991 more rows write_csv(inf_pop_size, \"input_data/inf_pop_size.csv\") # plot active cell counts inf_pop_size |>   filter(generation <= 500) |>   ggplot(aes(x = generation, y = active_cell_count)) +   geom_line() +   labs(x = \"Generation\", y = \"Number of infected active cells\")"},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"define-sampling-scheme","dir":"Articles","previous_headings":"Required run_wavess() inputs","what":"Define sampling scheme","title":"Prepare input data","text":"run_wavess() requires samp_scheme data frame input row day following columns: day: day sample sequences n_sample_active: Number sequences active cells sample day (note simulation output, number may lower population size smaller requested number sequences sample) n_sample_latent: Number sequences latent cells sample day (note simulation output, number may lower population size smaller requested number sequences sample) can create data frame , also provide helper function generate : define_sampling_scheme(). arguments function defaults, can run: lead sampling maximum 20 sequences (max_samp) every 365 days (sampling_frequency) 3650 days (n_days). example sampling shorter time period, frequent sampling fewer samples taken sampling event: Note simulation automatically end last sampling time, even growth curve continues generations. ’d like write file:","code":"define_sampling_scheme() #> # A tibble: 11 × 3 #>      day n_sample_active n_sample_latent #>    <int>           <dbl>           <dbl> #>  1     0              20              20 #>  2   365              20              20 #>  3   730              20              20 #>  4  1095              20              20 #>  5  1460              20              20 #>  6  1825              20              20 #>  7  2190              20              20 #>  8  2555              20              20 #>  9  2920              20              20 #> 10  3285              20              20 #> 11  3650              20              20 (samp_scheme <- define_sampling_scheme(   sampling_frequency_active = 30,   max_samp_active = 10,   n_days = 365 )) #> # A tibble: 14 × 3 #>      day n_sample_active n_sample_latent #>    <int>           <dbl>           <dbl> #>  1     0              10              20 #>  2    30              10               0 #>  3    60              10               0 #>  4    90              10               0 #>  5   120              10               0 #>  6   150              10               0 #>  7   180              10               0 #>  8   210              10               0 #>  9   240              10               0 #> 10   270              10               0 #> 11   300              10               0 #> 12   330              10               0 #> 13   360              10               0 #> 14   365               0              20 write_csv(samp_scheme, \"input_data/samp_scheme.csv\")"},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"extract-founder-sequence-from-an-alignment","dir":"Articles","previous_headings":"Required run_wavess() inputs","what":"Extract founder sequence from an alignment","title":"Prepare input data","text":"run_wavess() takes input character vector founder sequence(s) (founder_seqs). sequences must length contain gaps. provide function extract_seqs() extract founder sequence alignment ape::DNAbin format convert character vector. alignment can read using ape::read.FASTA() ape::read.dna(). NOTE: recommend using function extract one founder sequence initiate single simulation gaps present founder sequences length, lead error. Rather, like simulate multiple founders, recommend aligning founder sequences stripping gaps alignment remains codon-aligned, especially plan simulate immune fitness epitopes translated amino acids calculate immune fitness costs. alignment entire HIV genome, ’re interested ENV gp120 gene, can subset using start end arguments. , first know start end positions gp120 alignment. know start end positions gp120 HXB2 (6225 7757). get start end positions alignment, can therefore find alignment positions correspond HXB2 coordinates: can use start end positions extract gp120 founder sequence: function can also take reference sequence name (ref_name), can used input ref_seq argument run_wavess(). later. easiest way save sequence fasta file convert ape::DNAbin object save :","code":"gp120_start <- which(cumsum(as.character(   hxb2_cons_founder[\"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\", ] ) != \"-\") == 6225)[1] gp120_end <- which(cumsum(as.character(   hxb2_cons_founder[\"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\", ] ) != \"-\") == 7757)[1] founder_seq <- extract_seqs(hxb2_cons_founder, \"B.US.2011.DEMB11US006.KC473833\",   start = gp120_start, end = gp120_end )$founder rep(list(strsplit(founder_seq, \"\")[[1]]), 10) |>   as.DNAbin() |>   as.matrix() |>   write.FASTA(\"input_data/founder.fasta\")"},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"estimate-q-matrix","dir":"Articles","previous_headings":"Required run_wavess() inputs","what":"Estimate Q matrix","title":"Prepare input data","text":"model requires input Q matrix (q), defines rates nucleotide substitution possible transition nucleotides. default, matrix estimated approximately neutral sites: matrix based rates Zanini et al. 2017, converted approximate Q matrix dividing estimated overall nucleotide substitution rate. simulating organism HIV, want provide Q matrix estimated organism. phylogenetic tree building program estimate Q matrix. instance, Q matrix returned estimating tree using IQ-TREE (.iqtree output file). also provide function estimate_q() estimate Q multiple sequence alignment (ape::DNAbin format) directly R. Ideally, input function alignment sequences within-host evolution representative person. However, found simulation output relatively robust variations Q matrix, don’t within-host alignment, can input alignment somewhat closely related sequences (e.g. subtype). function outputs Q matrix rows “” nucleotide columns “” nucleotide. example (note matrix isn’t accurate ’s simply random set sequences): default, neighbor joining tree created using ape::bionj(ape::dist.dna(aln, model = 'TN93')). Instead, can provide input tree (tr). , Q matrix computed phangorn::pml_bb() using default GTR++R4 model nucleotide substitution (model) tree rearrangement (rearrangement). save file: Note: read back R get matrix form, can use code:","code":"(hiv_q_mat <- calc_q_from_rates(hiv_mut_rates, mut_rate = 2.4e-5, generation_time = 1.2)) #>            A          C          G          T #> A -1.3935602  0.1650215  1.1002145  0.1283242 #> C  0.9167813 -3.2089352  0.0915972  2.2005567 #> G  2.9338881  0.0182889 -3.3189236  0.3667466 #> T  0.5499598  1.8338005  0.5501132 -2.9338736 estimate_q(hiv_env_flt_2022) #> optimize edge weights:  -13347 --> -13272.97  #> optimize rate matrix:  -13272.97 --> -12963.97  #> optimize invariant sites:  -12963.97 --> -12460.48  #> optimize free rate parameters:  -12460.48 --> -10603  #> optimize edge weights:  -10603 --> -10590.63  #> optimize rate matrix:  -10590.63 --> -10581.46  #> optimize invariant sites:  -10581.46 --> -10581.46  #> optimize free rate parameters:  -10581.46 --> -10577.81  #> optimize edge weights:  -10577.81 --> -10577.48  #> optimize rate matrix:  -10577.48 --> -10577.26  #> optimize invariant sites:  -10577.26 --> -10577.26  #> optimize free rate parameters:  -10577.26 --> -10575.89  #> optimize edge weights:  -10575.89 --> -10575.83  #> optimize rate matrix:  -10575.83 --> -10575.79  #> optimize invariant sites:  -10575.79 --> -10575.79  #> optimize free rate parameters:  -10575.79 --> -10575.18  #> optimize edge weights:  -10575.18 --> -10575.16  #> optimize rate matrix:  -10575.16 --> -10575.14  #> optimize invariant sites:  -10575.14 --> -10575.14  #> optimize free rate parameters:  -10575.14 --> -10574.92  #> optimize edge weights:  -10574.92 --> -10574.91  #> optimize rate matrix:  -10574.91 --> -10574.91  #> optimize invariant sites:  -10574.91 --> -10574.91  #> optimize free rate parameters:  -10574.91 --> -10574.84  #> optimize edge weights:  -10574.84 --> -10574.84  #> optimize rate matrix:  -10574.84 --> -10574.83  #> optimize invariant sites:  -10574.83 --> -10574.83  #> optimize free rate parameters:  -10574.83 --> -10574.82  #> optimize edge weights:  -10574.82 --> -10574.81  #> optimize rate matrix:  -10574.81 --> -10574.81  #> optimize invariant sites:  -10574.81 --> -10574.81  #> optimize free rate parameters:  -10574.81 --> -10574.81  #> optimize edge weights:  -10574.81 --> -10574.81  #> optimize rate matrix:  -10574.81 --> -10574.81  #> optimize invariant sites:  -10574.81 --> -10574.81  #> optimize free rate parameters:  -10574.81 --> -10574.8  #> optimize edge weights:  -10574.8 --> -10574.8  #> optimize rate matrix:  -10574.8 --> -10574.8  #> optimize invariant sites:  -10574.8 --> -10574.8  #> optimize free rate parameters:  -10574.8 --> -10574.8  #> optimize edge weights:  -10574.8 --> -10574.8  #> optimize rate matrix:  -10574.8 --> -10574.8  #> optimize invariant sites:  -10574.8 --> -10574.8  #> optimize free rate parameters:  -10574.8 --> -10574.8  #> optimize edge weights:  -10574.8 --> -10574.8 #>            A          C          G          T #> A -1.5940889  0.3894774  1.0395679  0.1650437 #> C  0.7692561 -2.0446348  0.1948555  1.0805232 #> G  1.5490726  0.1470087 -1.9302494  0.2341682 #> T  0.2459336  0.8152003  0.2341682 -1.2953020 data.frame(hiv_q_mat) |>   rownames_to_column(var = \"nt_from\") |>   write_csv(\"input_data/hiv_q_mat.csv\") as.matrix(read.csv(\"input_data/hiv_q_mat.csv\", row.names = 1)) #>            A          C          G          T #> A -1.3935602  0.1650215  1.1002145  0.1283242 #> C  0.9167813 -3.2089352  0.0915972  2.2005567 #> G  2.9338881  0.0182889 -3.3189236  0.3667466 #> T  0.5499598  1.8338005  0.5501132 -2.9338736"},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"visualize-latent-cell-dynamics","dir":"Articles","previous_headings":"","what":"Latent cell dynamics","title":"Prepare input data","text":"required inputs related latency per-day rates events happen cell. (Note “turn ” , set rate equal 0.) helpful visualize latent cell dynamics prior simulating data given set rates. way model implements latency stochastic, meaning different number cells become latent simulation, overall trends similar across simulations, given set rates. make plots, need active cell counts, can generated define_growth_curve() function described . therefore using inf_pop_size dataset created earlier vignette. Also, rates related latency converted probabilities simulation, convert plotting. Please note assume rates (thus per-generation probabilities) small latency parameters, unlikely multiple events (activate, die, proliferate) occur single latent cell single [active cell] generation. multiple events occur single latent cell, first event ordered list chosen event occurred cell generation: cell becomes active, cell dies, cell proliferates.","code":"# set parameters to get latent curve to_latent <- 0.001 to_active <- 0.01 proliferation <- 0.01 death <- 0.01  # get latent cell count for each generation latent <- 0 active_latent_counts <- lapply(inf_pop_size$active_cell_count, function(x) {   n_to_latent <- rbinom(1, x, prob = to_latent)   to_active <- rbinom(latent, 1, prob = to_active)   to_proliferate <- rbinom(latent, 1, prob = proliferation)   to_die <- rbinom(latent, 1, prob = death)   n_to_active <- sum(to_active == 1)   n_to_die <- sum((to_die - to_active) == 1)   n_to_proliferate <- sum((to_proliferate - to_die - to_active) == 1)   counts <- tibble(     Active = x, Latent = latent, n_to_latent, n_to_active,     n_to_proliferate, n_to_die   )   latent <<- latent + n_to_latent - n_to_active + n_to_proliferate - n_to_die   return(counts) }) |>   bind_rows() |>   mutate(gen = row_number())  # Plot (latent) cell counts active_latent_counts |>   filter(gen <= 300) %>%   pivot_longer(c(Active, Latent)) |>   ggplot(aes(x = gen, y = value, col = name)) +   geom_line() +   # scale_y_log10() + # uncomment this if you want to scale the y axis by log10   scale_color_manual(values = c(\"black\", \"red\")) +   labs(x = \"Generation\", y = \"Number of infected cells\", col = \"Type of cell\")"},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"selection","dir":"Articles","previous_headings":"","what":"Selection","title":"Prepare input data","text":"wavess can simulate three types selection: conserved sites, replicative fitness relative reference sequence, B-cell immune selection user-defined epitopes. default, selection included simulations. However, recommend including selection obtain realistic model outputs. , describe generate inputs selective pressures.","code":""},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"fitness-costs","dir":"Articles","previous_headings":"Selection","what":"Fitness costs","title":"Prepare input data","text":"different forms selection fitness cost associated . fitness cost can range [0,1), 0 indicates cost. 1, indicates ability survive, allowed assume simulating scenarios infection established viruses least somewhat viable. However, using high fitness cost, e.g. 0.99, effectively simulates purifying selection due compounding nature fitness cost many generations. fitness, F, virus defined product fitness component: F=FC*FR*FIF=F_C*F_R*F_I FCF_C conserved fitness, FRF_R replicative fitness, FIF_I immune fitness. equation used compute FCF_C FRF_R : FC/R=(1−c)nF_{C/R} = (1-c)^n cc either conserved fitness cost replicative fitness cost, nn number mutations conserved sites number sites differ reference sequence, respectively. forms fitness used, position considered conserved site, considered replicative fitness. plot cost number mutations influences overall fitness:  calculation immune fitness bit involved, result computed largest fitness cost across immune-recognized epitopes: FI=max(cepitope)F_I = max(c_{epitope}) cepitopec_{epitope} vector costs epitope recognized immune system. Note cost changes generations. Please refer manuscript details. next sections, discuss identify conserved sites, create reference sequence, generate epitopes.","code":"costs <- c(0, 0.001, 0.01, 0.1, 0.99) n_muts <- 0:100 tibble(n_mut = sort(rep(n_muts, length(costs))), cost = rep(costs, length(n_muts))) %>%   mutate(fitness = (1 - cost)**n_mut) %>%   ggplot(aes(x = n_mut, y = fitness, col = factor(cost))) +   geom_line() +   geom_point() +   labs(x = \"Number of mutations\", y = \"Fitness\", col = \"Cost per mutation\")"},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"an-important-note-about-indexing-and-reference-sequences","dir":"Articles","previous_headings":"Selection","what":"An important note about indexing and reference sequences","title":"Prepare input data","text":"First, nucleotide positions must indexed relative start founder sequence simulation. Since back-end implemented Python, expect indexing begin 0. can run wavess using run_wavess() function R, also directly Python (see vignette(\"python\") details). way, inputs regardless program use run wavess. relevant conserved sites epitopes. Second, information interest conserved sites antibody contacts, often computed provided relative called reference sequence. HIV, reference sequence usually HXB2. community reference sequence different define reference sequence wavess. community reference sequence (e.g. HXB2) standard researchers use easily able share compare information. reference sequence defined wavess one believed representative “fit” sequence (immune pressure), however like think . information interest provided relative community reference sequence, must change indexing information relative founder sequence used simulation. easiest way ensure indexing correct alignment consisting founder sequence, community reference sequence (needed), wavess reference sequence (used), start end alignment start end founder sequence used simulation. alignment sequences longer input sequence want simulate, can use slice_aln() function slice desired section alignment. ’s example: use alignment .","code":"(gp120 <- slice_aln(hxb2_cons_founder, gp120_start, gp120_end)) #> 3 DNA sequences in binary format stored in a matrix. #>  #> All sequences of same length: 1563  #>  #> Labels: #> B.FR.83.HXB2_LAI_IIIB_BRU.K03455 #> CON_B(1295) #> B.US.2011.DEMB11US006.KC473833 #>  #> Base composition: #>     a     c     g     t  #> 0.381 0.160 0.214 0.245  #> (Total: 4.69 kb)"},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"identify-conserved-sites","dir":"Articles","previous_headings":"Selection","what":"Identify conserved sites","title":"Prepare input data","text":"run_wavess() can provide vector conserved sites conserved nuceltoide (conserved_sites argument). Mutations away conserved nucleotide fitness cost defined conserved_cost argument. generate vector conserved sites alignment, can use function identify_conserved_sites(), outputs data frame 5 columns: founder_pos: position founder founder_base: base founder sequence consensus_base: consensus base consensus_prop: proportion sequences consensus base conserved: whether (‘Yes’) (‘’) site considered conserved, based threshold value defined thresh argument (default: 0.99) can use function two ways. alignment includes founder sequence interest, need provide alignment ape::DNAbin format name founder sequence alignment. Note function assumes alignment consists segment founder sequence want simulate (.e., beginning alignment beginning founder sequence want simulate, end alignment end sequence want simulate). using built-hiv_env_flt_2022 alignment example. However, contains 10 sequences. reality, use many sequences. HIV, can download entire filtered alignment gene entire genome LANL HIV sequence database. example founder gp120 sequence use package (B.US.2011.DEMB11US006.KC473833), also provide vector conserved sites founder sequence (founder_conserved_sites) ease use. First, since hxb2_cons_founder sequence env, just want simulate gp120, slice part alignment: can use sliced alignment identify conserved sites: Alternatively, two alignments shared reference, one ’d like calculate conserved sites, contains founder, can provide alignments, well common reference, function return conserved sites relative founder sequence. case, shared reference sequence assumed start position alignment. can visualize conserved sites across genome using following code:  blue sites conserved, red sites conserved, y-axis indicates proportion sequences alignment contain consensus base. Note example uses 10 sequences. recommend using large alignment diverse sequences identify conserved sites ensure identified sites across many genetic backgrounds. provide information sequence output, input run_wavess takes vector conserved sites. generate , can run following code: write file (note use internal conserved sites accurate example, rather example run , accurate since run handful genomes):","code":"# get hxb2 gp120 length and end position in flt alignment len_hxb2_gp120 <- nchar(extract_seqs(hxb2_cons_founder,   \"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\",   start = gp120_start, end = gp120_end )$founder) flt_gp120_end <- which(cumsum(as.character(hiv_env_flt_2022[1, ]) != \"-\") ==   len_hxb2_gp120)[1] # subset to only gp120 section hiv_gp120_flt_2022 <- slice_aln(hiv_env_flt_2022, 1, flt_gp120_end) identify_conserved_sites(hiv_gp120_flt_2022, \"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\") #> # A tibble: 1,533 × 5 #>    founder_pos founder_base consensus_base consensus_prop conserved #>          <dbl> <chr>        <chr>                   <dbl> <chr>     #>  1           0 a            a                         1   Yes       #>  2           1 t            t                         1   Yes       #>  3           2 g            g                         1   Yes       #>  4           3 a            a                         1   Yes       #>  5           4 g            g                         1   Yes       #>  6           5 a            a                         1   Yes       #>  7           6 g            g                         1   Yes       #>  8           7 t            t                         0.8 No        #>  9           8 g            g                         1   Yes       #> 10           9 a            a                         1   Yes       #> # ℹ 1,523 more rows (founder_conserved_df <- identify_conserved_sites(hiv_gp120_flt_2022,   founder = \"B.US.2011.DEMB11US006.KC473833\",   ref = \"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\",   founder_aln = gp120 )) #> # A tibble: 1,503 × 5 #>    founder_pos founder_base consensus_base consensus_prop conserved #>          <dbl> <chr>        <chr>                   <dbl> <chr>     #>  1           0 a            a                         1   Yes       #>  2           1 t            t                         1   Yes       #>  3           2 g            g                         1   Yes       #>  4           3 a            a                         1   Yes       #>  5           4 g            g                         1   Yes       #>  6           5 a            a                         1   Yes       #>  7           6 g            g                         1   Yes       #>  8           7 c            t                         0.8 No        #>  9           8 g            g                         1   Yes       #> 10           9 a            a                         1   Yes       #> # ℹ 1,493 more rows founder_conserved_df |>   ggplot(aes(x = founder_pos, y = consensus_prop, fill = conserved)) +   geom_col() #> Warning: Removed 30 rows containing missing values or values outside the scale range #> (`geom_col()`). founder_conserved_sites_example <- founder_conserved_df |>   filter(conserved == \"Yes\") |>   select(founder_pos, founder_base) |>   deframe() |>   toupper()  head(founder_conserved_sites_example) #>   0   1   2   3   4   5  #> \"A\" \"T\" \"G\" \"A\" \"G\" \"A\" tail(founder_conserved_sites_example) #> 1497 1498 1499 1500 1501 1502  #>  \"A\"  \"A\"  \"A\"  \"A\"  \"G\"  \"A\" write_csv(enframe(founder_conserved_sites, name = \"position\", value = \"nucleotide\"), \"input_data/founder_conserved_sites.csv\")"},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"find-a-consensus-sequence","dir":"Articles","previous_headings":"Selection","what":"Find a consensus sequence","title":"Prepare input data","text":"implemented crude way generating consensus sequence, taking common base position, tie, base comes first alphabet. consensus sequence returned part identify_conserved_sites() output. like control generating consensus sequence, can use Consensus Maker tool LANL HIV website. convert consensus sequence correct input format run_wavess(), can use following code, NA values converted gaps: alignment including founder sequence wavess reference sequence ’d like use, can also use extract_seqs() function obtain : ’s okay reference sequence gaps. ignored computing fitness relative reference. write fasta file, use similar method writing founder fasta file:","code":"gsub(\"NA\", \"-\", paste0(founder_conserved_df$consensus_base, collapse = \"\")) #> [1] \"atgagagtgatgg---------ggacacagatg---aagtggagatgggggactatgatcttgggaatgataataatttgtagtgctacagaaaacttgtgggttactgtctactatggggtacctgtgtggaaagatgcagagaccaccctattttgtgcatcagatgctaaagcatatgatacagaagtgcataatgtctgggctacacatgcctgtgtacccacagaccccaacccacaagaaataaatttggaaaatgtgacagaagagtttaacatgtggaaaaataacatggtagaacagatgcataaagatataatcagtctatgggaccaaagcctaaagccatgtgtaaagttaacccctctctgtgttactttaaagtgcaatgactacaacaacaaca--aa---cactactacaactgaggaaggagaaataaaaaactgctctttcaatatgaccacagaattaagagataagaaacagaaagtatattcacttttttatagacttgatatagtacaaattgataataa---------t------aagtatagattaataaattgtaatacctcagccattacacaggcttgtccaaaggtatcctttgagccaattcccatacattattgtgccccagctggttttgcgattctaaagtgtaatgataaggagttcaatggaacaggaccatgcaagaatgtcagcacagtacaatgcacacatggaatcaagccagtagtatcaactcaactgctgttaaatggcagtctagcagaagaagagataatgattagatctgaaaatatcacagacaatgccaaaaccataatagtacaacttaataagcctgtaaaaattaattgtaccagacctaacaacaatacaagaaaaagtatacat--aggaccaggacaagcattctatgcaacaggtga---cataggggatataagaaaagcacattgtaatgtcagtagaacagaatggaataaaactttacaaaaggtagccaaacaattaagaaaacactttaacaaaacaataatcttt---aataattcaggaggggatttagaaattacaacacatagttttaattgtggaggagaatttttctactgcaacacatcaggcctgtttaatagcacttggaataaaaacaataacacaaaaaaaaataaaactataactctcccatgcagaataaagcaaattataaatatgtggcagagagcaggacaagcaatatatgcccctcccatccaaggagtaataaggtgtgaatcaaacattacaggactactattaacaagagatggtggaaa------taataaa------aataccgaaaccttcagacctggaggaggagatatgagggacaattggagaagtgaattatataaatataaagtagtaaaaattgaaccactaggagtagcacccaccaaggcaaaaagaagagtggtggagagagaaaaaaga\" (founder_ref <- extract_seqs(hxb2_cons_founder,   founder = \"B.US.2011.DEMB11US006.KC473833\",   ref = \"CON_B(1295)\",   start = gp120_start, end = gp120_end )) #> $founder #> [1] \"ATGAGAGCGATGGGGATCATGAGGAATTGGCAACACTTGTGGAGATGGGGCATGATGCTCCTTGGGATGTTGATGATCTGTAATGCTACAGACAACTTGTGGGTCACAGTCTATTATGGGGTACCTGTGTGGAGGGAAGCAAACACAACTCTATTTTGTGCATCAGATGCTAAAGCATATGAGACAGAGGTACATAATGTTTGGGCCACACATGCCTGTGTACCCACAGACCCCAACCCACAAGAAGTAAAATTGGGAAATGTGACAGAAAATTTTAATGCATGGAAAAATGACATGGTAGAACAGATGCATGAGGATATAATCAGTCTATGGGATCAAAGCCTAAAGCCATGTGTAAGATTAACCCCACTCTGTGTTACTCTAAATTGCACTGATCTTAATGCCACTAGCATTGGTAGTAACATGACACTGAAGGGAGAAATAAAAAATTGCACTTTCAATATCACCACAAGTAAAAACGATAAAAAGACAACAGAACGTGCATATTTTAATAGACTTGATGTGGTACCAATGGATGATAATAGTAGTAGTAGTACTAGTTATAGGTTGATAAGTTGTAACACCTCAGTCATTACACATGCCTGCCCAAAGGTATCCTTTGAGCCAATTCCCATACATTATTGTGCCCCAGCTGGTTTTGCGATTCTAAAGTGTAATGATAAAAAATTTAATGGAAAAGGACTATGTAAAAATGTCAGCACAGTACAATGTACACATGGAATTAGACCAGTAGTATCAACTCAACTGTTGCTGAATGGCAGTCTAGCAGAAGAAGAAGTAGTAATTAGATCTGAAAATATCTCTAACAATGCCAAAACCATAATAGTACATCTGAAGGAATCTGTACAAATTATTTGTGTAAGACCCAACAACAATACAAGACAAGGTATACATATGGGACCAGGAAGGACATTTTATACAACAGGGGGGATAATAGGAGATATAAGGCAAGCATATTGTAACATTAGTAGGGCAGAATGGACTAACACTCTAGGAAAGATAGTTGGAAAATTAAGAGAACGATTTAATAAAACAATAATCTTTAATCATTCCTCAGGAGGGGACCTAGAAATTGTGACACACAGTTTTAATTGTGGAGGGGAATTTTTCTACTGCAATACATCAGCACTGTTTAATAGTACTTGGAATAGTACTATAAATACAAGTGAAAATGACACAATCATACTCCCATGCAGAATAAAACAAATTATAAATCTGTGGCAGGAAGTAGGAAGAGCAATGTATGCTCCTCCCATCAGGGGAAACATTAGCTGTACATCAAATATTACGGGGGTGCTATTAACAAGAGATGGTGGCGATGACCCTAACGGGACCAACGACACCGAGACCTTCAGACCTGGAGGAGGAGATATGAGGGACAATTGGAGAAATGAATTGTATAAATACAAAGTAGTAAAAATTGAACCATTGGGAATAGCACCCACCAGGGCAAAGAGAAGAGTGGTGCAAAGAGAAAAAAGA\" #>  #> $ref #> [1] \"ATGAGAGTGAAGGGGATCAGGAAGAATTATCAGCACTTGTGGAGATGGGGCATCATGCTCCTTGGGATGTTGATGATCTGTAGTGCTGCAGAAAAATTGTGGGTCACAGTCTATTATGGGGTACCTGTGTGGAAAGAAGCAACCACCACTCTATTTTGTGCATCAGATGCTAAAGCATATGATACAGAGGTACATAATGTTTGGGCCACACATGCCTGTGTACCCACAGACCCCAACCCACAAGAAGTAGTATTGGAAAATGTGACAGAAAATTTTAACATGTGGAAAAATAACATGGTAGAACAGATGCATGAGGATATAATCAGTTTATGGGATCAAAGCCTAAAGCCATGTGTAAAATTAACCCCACTCTGTGTTACTTTAAATTGCACTGATTTTAATACTAATAATAATAATACTAATA-TA-TATGAAAGGAGAAATAAAAAACTGCTCTTTCAATATCACCACAAGCATAAGAGATAAGATGCAGAAAGAATATGCACTTTTTTATAAACTTGATGTAGTACCAATAGATAATGA---------TAATACTAGCTATAGGTTGATAAGTTGTAACACCTCAGTCATTACACAGGCCTGTCCAAAGGTATCCTTTGAGCCAATTCCCATACATTATTGTGCCCCGGCTGGTTTTGCGATTCTAAAGTGTAATGATAAGAAGTTCAATGGAACAGGACCATGTAAAAATGTCAGCACAGTACAATGTACACATGGAATTAGGCCAGTAGTATCAACTCAACTGCTGTTAAATGGCAGTCTAGCAGAAGAAGAGGTAGTAATTAGATCTGAAAATTTCACAGACAATGCTAAAACCATAATAGTACAGCTGAATGAATCTGTAGAAATTAATTGTACAAGACCCAACAACAATACAAGAAAAAGTATACATATAGGACCAGGGAGAGCATTTTATGCAACAGGAGAAATAATAGGAGATATAAGACAAGCACATTGTAACATTAGTAGAGCAAAATGGAATAACACTTTAAAACAGATAGTTAAAAAATTAAGAGAACAATTTAATAAAACAATAGTCTTTAATCAATCCTCAGGAGGGGACCCAGAAATTGTAATGCACAGTTTTAATTGTGGAGGGGAATTTTTCTACTGTAATACAACACAACTGTTTAATAGTACTTGGAATAATAATAATA-TACTAAAAAAAATGAAACTATCACACTCCCATGCAGAATAAAACAAATTATAAACATGTGGCAGGAAGTAGGAAAAGCAATGTATGCCCCTCCCATCAGAGGACAAATTAGATGTTCATCAAATATTACAGGGCTGCTATTAACAAGAGATGGTGGTAA------TAATAATA--AACAACACTGAGACCTTCAGACCTGGAGGAGGAGATATGAGGGACAATTGGAGAAGTGAATTATATAAATATAAAGTAGTAAAAATTGAACCATTAGGAGTAGCACCCACCAAGGCAAAGAGAAGAGTGGTGCAGAGAGAAAAAAGA\" strsplit(founder_ref$ref, \"\")[[1]] |>   as.DNAbin() |>   as.matrix() |>   write.FASTA(\"input_data/ref.fasta\")"},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"sample-epitopes","dir":"Articles","previous_headings":"Selection","what":"Sample epitopes","title":"Prepare input data","text":"Immune fitness wavess defined epitope locations sequence, can maximum fitness cost 0 1. defined amino acid level, must within nucleotide sequence translated protein correct reading frame. can define epitope locations, provide function sample_epitopes() , given epitope probabilities amino acid position interest, return randomly sampled nucleoitde epitope locations based probability epitope occurring location. Therefore, function sample_epitopes() takes input data frame must contain columns amino acid position (aa_position) epitope probability position (epitope_probability). amino acid positions must include corresponding nucleotide sequence simulated, must indexed way first amino acid position corresponds first nucleotide position founder sequence. example, gp120. already filtered built-package data include subset. possible, recommend determining epitope probabilities based sort known antibody contact/binding/neutralization maps. HIV ENV gp120, used features LANL HIV immunology database: need positions column, provide rest information reference. don’t information, can use uniformly distributed probabilities, informed guess probabilities epitopes binding higher. can put positions get_epitope_frequencies() function, returns tibble three columns: aa_pos: amino acid position n_features: number features position epitope_probability: probability epitope position, given input positions can visualize follows:  information can used input sample_epitopes() function. Note output function different time ’s run, since locations selected randomly time. function returns start end nucleotide positions epitope, relative input amino acid positions. many ways customize output function. can provide starting (start_aa_pos) ending (end_aa_pos) amino acid positions consider epitope sampling (’ve pre-subset gp120 features), number epitopes sample (num_epitopes), amino acid epitope length (aa_epitope_length), maximum fitness cost epitope (max_fit_cost). amino acid positions relative community reference sequence, also need create map community reference founder sequence data can re-indexed founder sequence. case, amino acid positions used HXB2, want map founder sequence. use alignment contains exact founder sequence plan simulate (longer shorter). alignment (e.g. using slice_aln() function described ), can use map_ref_founder() function, returns reference founder positions mapped : can input sample_epitopes(), return nucleotide positions relative founder sequence (instead HXB2): two ways visualize epitopes:   write file:","code":"env_features #> # A tibble: 3,022 × 13 #>       ID Title                   Reference `Feature type` `Mab(s)(Binding type)` #>    <dbl> <chr>                   <chr>     <chr>          <chr>                  #>  1     4 PGT121 epitope defined… Mouquet2… binding        PGT121(V3)             #>  2     4 PGT121 epitope defined… Mouquet2… binding        PGT121(V3)             #>  3     4 PGT121 epitope defined… Mouquet2… binding        PGT121(V3)             #>  4     4 PGT121 epitope defined… Mouquet2… binding        PGT121(V3)             #>  5     4 PGT121 epitope defined… Mouquet2… binding        PGT121(V3)             #>  6     4 PGT121 epitope defined… Mouquet2… binding        PGT121(V3)             #>  7     4 PGT121 epitope defined… Mouquet2… binding        PGT121(V3)             #>  8     4 PGT121 epitope defined… Mouquet2… binding        PGT121(V3)             #>  9     4 PGT121 epitope defined… Mouquet2… binding        PGT121(V3)             #> 10     4 PGT121 epitope defined… Mouquet2… binding        PGT121(V3)             #> # ℹ 3,012 more rows #> # ℹ 8 more variables: `Experimental method(s)` <chr>, Position <dbl>, #> #   `Env feature(s)` <chr>, `HXB2 AA` <chr>, `Entropy M` <dbl>, #> #   `Entropy B` <dbl>, `Entropy C` <dbl>, Annotation <chr> (epi_probs <- get_epitope_frequencies(env_features$Position)) #> # A tibble: 480 × 3 #>    aa_position n_features epitope_probability #>          <dbl>      <dbl>               <dbl> #>  1          31          1            0.000331 #>  2          32          0            0        #>  3          33          0            0        #>  4          34          0            0        #>  5          35          0            0        #>  6          36          0            0        #>  7          37          0            0        #>  8          38          0            0        #>  9          39          0            0        #> 10          40          0            0        #> # ℹ 470 more rows epi_probs %>%   ggplot(aes(x = aa_position, y = epitope_probability)) +   geom_col() +   labs(x = \"HXB2 amino acid position\", y = \"Epitope probability\") sample_epitopes(epi_probs) #> 2 resamples required #> # A tibble: 10 × 3 #>    epi_start_nt epi_end_nt max_fitness_cost #>           <dbl>      <dbl>            <dbl> #>  1          483        513             0.03 #>  2          906        936             0.06 #>  3          981       1011             0.09 #>  4          822        852             0.12 #>  5         1083       1113             0.15 #>  6         1488       1518             0.18 #>  7          525        555             0.21 #>  8          405        435             0.24 #>  9          441        471             0.27 #> 10         1368       1398             0.3 (ref_founder_map <- map_ref_founder(gp120,   ref = \"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\",   founder = \"B.US.2011.DEMB11US006.KC473833\" )) #> # A tibble: 1,563 × 5 #>    alignment_pos ref_pos founder_pos ref_base founder_base #>            <dbl>   <dbl>       <dbl> <chr>    <chr>        #>  1             0       0           0 a        a            #>  2             1       1           1 t        t            #>  3             2       2           2 g        g            #>  4             3       3           3 a        a            #>  5             4       4           4 g        g            #>  6             5       5           5 a        a            #>  7             6       6           6 g        g            #>  8             7       7           7 t        c            #>  9             8       8           8 g        g            #> 10             9       9           9 a        a            #> # ℹ 1,553 more rows (epitope_locations <- sample_epitopes(epi_probs,   ref_founder_map = ref_founder_map )) #> 4 resamples required #> # A tibble: 10 × 3 #>    epi_start_nt epi_end_nt max_fitness_cost #>           <dbl>      <dbl>            <dbl> #>  1         1053       1083             0.03 #>  2          930        960             0.06 #>  3          582        612             0.09 #>  4         1392       1422             0.12 #>  5         1245       1275             0.15 #>  6          435        465             0.18 #>  7          969        999             0.21 #>  8          522        552             0.24 #>  9          816        846             0.27 #> 10          474        504             0.3 epitope_locations |>   ggplot(aes(x = epi_start_nt, y = max_fitness_cost)) +   geom_point() +   labs(x = \"Epitope start position\", y = \"Max fitness cost\") epitope_locations %>%   ggplot(aes(x = seq_len(nrow(.)), y = max_fitness_cost, col = epi_start_nt)) +   geom_point() +   scale_x_continuous(breaks = 1:10) +   labs(x = \"Epitope\", y = \"Max fitness cost\", col = \"Epitope start\\nposition\") write_csv(epitope_locations, \"input_data/epitope_locations.csv\")"},{"path":"https://molevolepid.github.io/wavess/articles/prepare_input_data.html","id":"on-to-simulations","dir":"Articles","previous_headings":"","what":"On to simulations","title":"Prepare input data","text":"Next, check vignette(\"run_wavess\") see use inputs simulate within-host evolution.","code":""},{"path":"https://molevolepid.github.io/wavess/articles/python.html","id":"installing-dependencies","dir":"Articles","previous_headings":"","what":"Installing dependencies","title":"Running wavess in Python","text":"Python script implementation wavess requires following imports: pandas, Bio, time, sys, os, yaml, csv, copy, random, numpy, collections easiest way install create conda environment. f don’t already installed, first install mamba (conda, ’s slower). , create wavess conda environment (), can use environment yaml file inst/python directory. Navigate directory run command: Next, activate wavess environment (per session):","code":"mamba env create -f env.yaml mamba activate wavess"},{"path":"https://molevolepid.github.io/wavess/articles/python.html","id":"config-file","dir":"Articles","previous_headings":"","what":"Config file","title":"Running wavess in Python","text":"run_wavess.py requires config.yaml file (example config file inst/python) defines various parameters includes paths input files. File inputs (example data inst/extdata/): pop_samp: csv columns generation, active_cell_count, n_sample_active. Note initial active cell population size first generation must number input founder sequences (simply input founder sequences). Can generated using [generate_pop_samp()] function. founder_seqs: fasta file founder sequence(s). founder sequence(s) may contain characters ACGT, gaps allowed. modeling immune fitness, expected codon-aligned. q: csv named Q matrix nucleotide substitution rates. Rows , columns . Can generated using [estimate_q()] function. conserved_sites: csv conserved sites indexed 0 row contains conserved site column called “position” conserved nucleotide found site column called “nucleotide”. can generated using [identify_conserved_sites()] function. empty string, conserved fitness costs included. ref_seq: fasta file reference sequence. consensus sequence, can used reference sequence, can generated using function [identify_conserved_sites()]. empty string, fitness costs relative reference sequence included. epitope_locations: csv epitope locations maximum fitness costs columns epi_start_nt, epi_end_nt, max_fitness_cost. epitopes expected indexed 0 protein correct reading frame, nucleotide sequences translated amino acids calculate immune fitness cost. information can generated using functions [get_epitope_frequencies()] [sample_epitopes()]. empty string provided, immune fitness costs included. Parameters: Diversity-generating mechanisms: mut_rate: Mutation rate per site per generation `recomb_rate``: Recombination rate per site per generation Latent cell dynamics: prob_act_to_lat: probability infected cell becoming latent prob_lat_to_act: probability latent cell become active prob_lat_prolif: probability latent cell proliferate (based central memory cells) prob_lat_die: probability latent cell die Parameters related fitness: Conserved sites: conserved_cost: fitness cost per mutation conserved site Fitness relative reference sequence: rep_exp: exponent replicative fitness function Immune fitness: seroconversion_time: seroconversion time generations; immunity considered generation onward immune_response_proportion: proportion new viral antigen must reach initiate immune response corresponding epitope time_to_full_potency: number generations new immune response reach full potency","code":""},{"path":"https://molevolepid.github.io/wavess/articles/python.html","id":"running-run_wavess-py","dir":"Articles","previous_headings":"","what":"Running run_wavess.py","title":"Running wavess in Python","text":"run_wavess.py takes two required inputs one optional input: config file, contains information input file paths parameters prefix output files (including directories) optional number seed set random number generation (make results reproducible) example (set seed reproducible, usually don’t want ): Note path output file least one forward slash. slash end, prefix output files. want prefix output files, can add end. Two output files generated: csv file containing various counts sampled generation, fasta file containing sampled sequences generation. See vignette(\"run_wavess\") details outputs. Example output files can found inst/python/wavess_output/.","code":"python run_wavess.py config.yaml wavess_output/ 1234"},{"path":"https://molevolepid.github.io/wavess/articles/python.html","id":"python-tests","dir":"Articles","previous_headings":"","what":"Python tests","title":"Running wavess in Python","text":"run tests Python part code, navigate inst/python run: can look coverage report htmlcov/index.html.","code":"pytest tests.py --cov --cov-report=html"},{"path":"https://molevolepid.github.io/wavess/articles/run_wavess.html","id":"a-note-about-using-the-simulation-output","dir":"Articles","previous_headings":"","what":"A note about using the simulation output","title":"Simulate within-host evolution with `wavess`","text":"get started, just want note output simulations stochastic, meaning different time run. can set seed reproducibility troubleshooting ’d like, vast majority applications, want run many replicates given simulation scenario different seeds (random okay) get reasonable sense dynamics observed. also want check simulation outputs see giving reasonable/expected results conform prior knowledge system ’re simulating. output seem right, might tweak input parameters work particular system. go detail analyzing model output separate vignette (see vignette(\"analyze_output\")).","code":""},{"path":"https://molevolepid.github.io/wavess/articles/run_wavess.html","id":"load-libraries","dir":"Articles","previous_headings":"","what":"Load libraries","title":"Simulate within-host evolution with `wavess`","text":"First, load wavess library additional libraries ’ll use vignette:","code":"library(wavess) library(ape) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following object is masked from 'package:ape': #>  #>     where #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)"},{"path":"https://molevolepid.github.io/wavess/articles/run_wavess.html","id":"create-python-virtual-environment","dir":"Articles","previous_headings":"","what":"Create Python virtual environment","title":"Simulate within-host evolution with `wavess`","text":"Next, must create Python virtual environment. virtual environment required underlying code run_wavess() written Python. create virtual environment machine.","code":"create_python_venv() #> Warning in create_python_venv(): Skipped installation of the following #> packages: scipy Use `force` to force installation or update."},{"path":"https://molevolepid.github.io/wavess/articles/run_wavess.html","id":"prepare-input-data","dir":"Articles","previous_headings":"","what":"Prepare input data","title":"Simulate within-host evolution with `wavess`","text":"Next, must generate input data. ’re interested learning prepare input data, please see corresponding vignette (see vignette(\"prepare_input_data\")). simulate 300 generations sampling every 100 generations simulation doesn’t take long run.","code":"pop <- define_growth_curve(n_gens = 300) samp <- define_sampling_scheme(sampling_frequency_active = 100, sampling_frequency_latent = 100) %>% filter(day <= 300) founder_ref <- extract_seqs(hxb2_cons_founder,   founder = \"B.US.2011.DEMB11US006.KC473833\",   ref = \"CON_B(1295)\",   start = 6225, end = 7787 ) gp120 <- slice_aln(hxb2_cons_founder, 6225, 7787) epi_probs <- get_epitope_frequencies(env_features$Position) ref_founder_map <- map_ref_founder(gp120,   ref = \"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\",   founder = \"B.US.2011.DEMB11US006.KC473833\" ) epitope_locations <- sample_epitopes(epi_probs,   ref_founder_map = ref_founder_map ) #> 16 resamples required"},{"path":"https://molevolepid.github.io/wavess/articles/run_wavess.html","id":"simplest-way-to-run_wavess","dir":"Articles","previous_headings":"","what":"Simplest way to run_wavess()","title":"Simulate within-host evolution with `wavess`","text":"simplest way simulate within-host evolution use defaults, input population growth sampling scheme, founder sequence, nucleotide substitution probabilities. Please note total population size simulated greatly influences simulation output. , simulate one founder sequence. may simulate , ensure length, include gaps, codon-aligned. also modify input growth curve start correct number cells. See vignette('prepare_input_data') details. output format run_wavess() list length four containing tibble various counts, fitness sampled viruses, DNA sequences sampled viruses active latent reservoir: Note , latent cells sampled, length list three instead, sequences latent cells. counts tibble contains following columns: generation: generation number events recorded sequences sampled active_cell_count: active cell count latent_cell_count: latent cell count active_turned_latent: number active cells became latent latent_turned_active: number latent cells became active latent_died: number latent cells died latent_proliferated: number latent cells proliferated number_mutations: number mutations across sequences number_recombinations: number infected cells least one recombination event mean_fitness_active: mean fitness active cells mean_conserved_active: mean conserved sites fitness active cells mean_immune_active: mean immune fitness active cells mean_replicative_active: mean replicative fitness (comparison ref_seq) active cells can see, default values run_wavess() include latency, mutations, dual infections (lead recombination), fitness costs. fitness tibble contains row sampled sequence (active pool) following columns: generation: generation virus sampled seq_id: sequence id (corresponds sequence name ). Note value different generations say anything ancestral relationship viruses. immune: virus immune fitness conserved: virus conserved fitness replicative: virus replicative fitness (compared reference) overall: overall fitness (three multiplied together) , fitness 1 everything didn’t model fitness. sequences returned well, ape::DNAbin format: Sequences active cells: Sequences latent cells: sequence named follows: Founder sequences named “founderX” X index founder sequence input vector (indexed 0). sequences sampled named generation, whether sampled active latent reservoir, number. Note value different generations say anything ancestral relationship viruses. outputs can plotted analyzed various ways. ’d like learn analyze output, please check post-processing vignette vignette(\"analyze_output\").","code":"required_args_only <- run_wavess(   inf_pop_size = pop,   samp_scheme = samp,   founder_seqs = rep(founder_ref$founder, 10) ) names(required_args_only) #> [1] \"counts\"      \"fitness\"     \"seqs_active\" \"seqs_latent\" required_args_only$counts #> # A tibble: 4 × 13 #>   generation active_cell_count latent_cell_count active_turned_latent #>        <int>             <int>             <int>                <int> #> 1          0                10                 0                    0 #> 2        100              2000               116                    2 #> 3        200              2000               145                    2 #> 4        300              2000               178                    2 #> # ℹ 9 more variables: latent_turned_active <int>, latent_died <int>, #> #   latent_proliferated <int>, number_mutations <int>, #> #   number_recombinations <int>, mean_fitness_active <dbl>, #> #   mean_conserved_active <dbl>, mean_immune_active <dbl>, #> #   mean_replicative_active <dbl> required_args_only$fitness #> # A tibble: 80 × 6 #>    generation seq_id   immune conserved replicative overall #>    <chr>      <chr>     <dbl>     <dbl>       <dbl>   <dbl> #>  1 founder    founder0      1         1           1       1 #>  2 founder    founder1      1         1           1       1 #>  3 founder    founder2      1         1           1       1 #>  4 founder    founder3      1         1           1       1 #>  5 founder    founder4      1         1           1       1 #>  6 founder    founder5      1         1           1       1 #>  7 founder    founder6      1         1           1       1 #>  8 founder    founder7      1         1           1       1 #>  9 founder    founder8      1         1           1       1 #> 10 founder    founder9      1         1           1       1 #> # ℹ 70 more rows required_args_only$seqs_active #> 80 DNA sequences in binary format stored in a matrix. #>  #> All sequences of same length: 1503  #>  #> Labels: #> founder0 #> founder1 #> founder2 #> founder3 #> founder4 #> founder5 #> ... #>  #> Base composition: #>     a     c     g     t  #> 0.370 0.165 0.222 0.243  #> (Total: 120.24 kb) required_args_only$seqs_latent #> 60 DNA sequences in binary format stored in a matrix. #>  #> All sequences of same length: 1503  #>  #> Labels: #> gen100_latent_0 #> gen100_latent_1 #> gen100_latent_2 #> gen100_latent_3 #> gen100_latent_4 #> gen100_latent_5 #> ... #>  #> Base composition: #>     a     c     g     t  #> 0.370 0.164 0.222 0.243  #> (Total: 90.18 kb)"},{"path":"https://molevolepid.github.io/wavess/articles/run_wavess.html","id":"including-selective-pressures","dir":"Articles","previous_headings":"","what":"Including selective pressures","title":"Simulate within-host evolution with `wavess`","text":"run_wavess() can simulate three types selective pressure: Conserved sites fitness Fitness relative “fit” reference sequence B-cell immune response Note nucleotide positions related fitness expected indexed 0. Including requires additional inputs, described detail prepare input data vignette (vignette(\"prepare_input_data\")). conserved sites fitness replicative fitness (comparison reference) modeled using multiplicative fitness landscape equation: fitness cost must 0 1, 0 indicates fitness cost 1 indicates ability survive. n_mut number mutations conserved sites number nucleotides different reference sequence. additional details selective pressures implemented, please see manuscript [ADD LINK ].","code":"fitness = (1 - cost) ** n_mut"},{"path":"https://molevolepid.github.io/wavess/articles/run_wavess.html","id":"conserved-sites-fitness","dir":"Articles","previous_headings":"Including selective pressures","what":"Conserved sites fitness","title":"Simulate within-host evolution with `wavess`","text":"simulate conserved sites fitness, must provide vector sites founder sequence considered conserved (conserved_sites argument). default, cost mutation sites 0.99 (conserved_cost argument). ’s example simulating evolution conserved sites fitness: look mean conserved fitness active cells, ’ll see ’s always 1 (although may sometimes 1 depending simulation, since output stochastic).","code":"conserved_fitness <- run_wavess(   inf_pop_size = pop,   samp_scheme = samp,   founder_seqs = rep(founder_ref$founder, 10),   conserved_sites = founder_conserved_sites,   conserved_cost = 0.99 ) conserved_fitness$counts$mean_conserved_active #> [1] 1.000000 1.000000 0.999505 1.000000"},{"path":"https://molevolepid.github.io/wavess/articles/run_wavess.html","id":"comparison-to-a-reference","dir":"Articles","previous_headings":"Including selective pressures","what":"Comparison to a reference","title":"Simulate within-host evolution with `wavess`","text":"simulate fitness compared reference, must provide “fit” reference sequence compare simulated sequence . strength fitness can altered using replicative_cost argument. , can see mean replicative fitness now less 1:","code":"ref_fitness <- run_wavess(   inf_pop_size = pop,   samp_scheme = samp,   founder_seqs = rep(founder_ref$founder, 10),   ref_seq = founder_ref$ref ) ref_fitness$counts$mean_replicative_active #> [1] 0.8520756 0.8493573 0.8460892 0.8430956"},{"path":"https://molevolepid.github.io/wavess/articles/run_wavess.html","id":"immune-fitness","dir":"Articles","previous_headings":"Including selective pressures","what":"Immune fitness","title":"Simulate within-host evolution with `wavess`","text":"Active immunity can modeled defining B-cell epitopes locations can recognized immune system. Nucleotide epitopes translated amino acids immune fitness costs calculated. epitope recognized present least 100 times across population (n_for_imm argument). epitope recognized, undergoes affinity maturation 90 days (days_full_potency), time reaches full potency. Epitopes also cross-reactive. Cross-reactivity sampled Beta distribution alpha 1 beta square Hamming distance nearest recognized epitope:  immune fitness now less 1 immune system kicks : Please note model sensitive maximum immune fitness cost given epitope.","code":"lapply(1:5, function(x) {   tibble(     n_muts = factor(x),     quantile = seq(0, 1, 1 / 1000),     val = dbeta(quantile, 1, x^2)   ) }) |>   bind_rows() |>   ggplot(aes(x = quantile, y = val, col = n_muts)) +   geom_line() +   scale_color_brewer(palette = \"Spectral\") +   theme_classic() +   labs(x = \"Quantile\", y = \"Value\", col = \"Hamming\\ndistance\") immune_fitness <- run_wavess(   inf_pop_size = pop,   samp_scheme = samp,   founder_seqs = rep(founder_ref$founder, 10),   epitope_locations = epitope_locations ) immune_fitness$counts$mean_immune_active #> [1] 1.0000000 0.7033000 0.7284700 0.7380817"},{"path":"https://molevolepid.github.io/wavess/articles/run_wavess.html","id":"multiple-selective-pressures-at-once","dir":"Articles","previous_headings":"","what":"Multiple selective pressures at once","title":"Simulate within-host evolution with `wavess`","text":"can also include multiple selective pressures using multiple arguments described .","code":""},{"path":"https://molevolepid.github.io/wavess/articles/run_wavess.html","id":"events-defined-by-rates","dir":"Articles","previous_headings":"","what":"Events defined by rates","title":"Simulate within-host evolution with `wavess`","text":"several events can occur within-host evolution defined rates occurrence (converted per-generation probabilities). include mutation rate (mut_rate), recombination rate (recomb_rate), various rates related latent cell dynamics (act_to_lat, lat_to_act, lat_prolif, lat_die). can turned setting respective rate value 0. simulation starts 0 latent cells, setting act_to_lat turn latent cell dynamics .","code":""},{"path":"https://molevolepid.github.io/wavess/articles/run_wavess.html","id":"seed","dir":"Articles","previous_headings":"","what":"Seed","title":"Simulate within-host evolution with `wavess`","text":"seed can set reproducibility using seed argument.","code":""},{"path":"https://molevolepid.github.io/wavess/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zena Lapp. Author, maintainer. Narmada Sambaturu. Author. Kenneth Benoit. Copyright holder.            python install Akitaka Matsuo. Copyright holder.            python install Johannes Gruber. Copyright holder.            python install","code":""},{"path":"https://molevolepid.github.io/wavess/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lapp Z, Sambaturu N (2025). wavess: Within-Host Agent-Based Viral Evolution Sequence Simulator. R package version 0.0.0.9000, https://molevolepid.github.io/wavess/.","code":"@Manual{,   title = {wavess: Within-Host Agent-Based Viral Evolution Sequence Simulator},   author = {Zena Lapp and Narmada Sambaturu},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://molevolepid.github.io/wavess/}, }"},{"path":"https://molevolepid.github.io/wavess/index.html","id":"wavess","dir":"","previous_headings":"","what":"Within-Host Agent-Based Viral Evolution Sequence Simulator","title":"Within-Host Agent-Based Viral Evolution Sequence Simulator","text":"Within-host agent-based viral evolution sequence simulator. goal wavess simulate within-host viral sequence evolution optionally including recombination, latent infected cell reservoir, three types selection (conserved sites, comparison fit sequence, antibody-mediated immunity). package also provides functions pre-process data input simulator, well post-processing functions analyze simulation output. post-processing functions can also used real data. default settings simulator assume sequences simulated HIV gp120.","code":""},{"path":"https://molevolepid.github.io/wavess/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Within-Host Agent-Based Viral Evolution Sequence Simulator","text":"can install development version wavess GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"MolEvolEpid/wavess\")"},{"path":"https://molevolepid.github.io/wavess/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Within-Host Agent-Based Viral Evolution Sequence Simulator","text":"Please see following vignettes examples: Preparing input data: vignette(\"prepare_input_data\") Running wavess: vignette(\"run_wavess\") Analyzing output: vignette(\"analyze_output\") Running python script: vignette(\"python\")","code":""},{"path":"https://molevolepid.github.io/wavess/reference/calc_div_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sequence-based diversity and divergence — calc_div_metrics","title":"Calculate sequence-based diversity and divergence — calc_div_metrics","text":"See vignette('analyze_output') details.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/calc_div_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sequence-based diversity and divergence — calc_div_metrics","text":"","code":"calc_div_metrics(aln, founder, gen)"},{"path":"https://molevolepid.github.io/wavess/reference/calc_div_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sequence-based diversity and divergence — calc_div_metrics","text":"aln DNA alignment ape::DNAbin format founder Name founder sequence alignment gen Vector indicates generation sequence alignment, assumed order alignment","code":""},{"path":"https://molevolepid.github.io/wavess/reference/calc_div_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sequence-based diversity and divergence — calc_div_metrics","text":"tibble including mean sequence-based diversity divergence generation","code":""},{"path":"https://molevolepid.github.io/wavess/reference/calc_div_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sequence-based diversity and divergence — calc_div_metrics","text":"","code":"# This example is somewhat contrived, but it shows how it works. calc_div_metrics(   hxb2_cons_founder,   \"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\",   c(1, 2, 2) ) #> # A tibble: 2 × 3 #>     gen diversity divergence #>   <dbl>     <dbl>      <dbl> #> 1     1  NaN          0      #> 2     2    0.0660     0.0542"},{"path":"https://molevolepid.github.io/wavess/reference/calc_q_from_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Q matrix from nucleotide substitution rates — calc_q_from_rates","title":"Calculate Q matrix from nucleotide substitution rates — calc_q_from_rates","text":"Method: needed, convert rates per day rates per generation Convert rates per generation probabilities per generation Make diagonal rows probability matrix p sum 1 Convert q matrix, assuming mutation rate mut_rate mutations/site/generation, solving q equation p = exp(q*mut_rate)","code":""},{"path":"https://molevolepid.github.io/wavess/reference/calc_q_from_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Q matrix from nucleotide substitution rates — calc_q_from_rates","text":"","code":"calc_q_from_rates(rates, mut_rate, generation_time = NULL)"},{"path":"https://molevolepid.github.io/wavess/reference/calc_q_from_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Q matrix from nucleotide substitution rates — calc_q_from_rates","text":"rates 4x4 matrix individual nucleotide substitution rates potential substitution (per-site per-generation per-site per-day) following row column names: ,C,G,T. mut_rate Overall per-site per-generation mutation rate. generation_time Generation time (nucleotide substitution rates days rather generations; default: NULL, assumes rate matrix per-generation)","code":""},{"path":"https://molevolepid.github.io/wavess/reference/calc_q_from_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Q matrix from nucleotide substitution rates — calc_q_from_rates","text":"Nucletoide substitution rate matrix Q","code":""},{"path":"https://molevolepid.github.io/wavess/reference/calc_q_from_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Q matrix from nucleotide substitution rates — calc_q_from_rates","text":"","code":"calc_q_from_rates(hiv_mut_rates, 2.4e-5, 1.2) #>            A          C          G          T #> A -1.3935602  0.1650215  1.1002145  0.1283242 #> C  0.9167813 -3.2089352  0.0915972  2.2005567 #> G  2.9338881  0.0182889 -3.3189236  0.3667466 #> T  0.5499598  1.8338005  0.5501132 -2.9338736"},{"path":"https://molevolepid.github.io/wavess/reference/calc_tr_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate tree summary statistics — calc_tr_stats","title":"Calculate tree summary statistics — calc_tr_stats","text":"See vignette('analyze_output') details.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/calc_tr_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate tree summary statistics — calc_tr_stats","text":"","code":"calc_tr_stats(tr, timepoints, bl_thresh = 1e-08)"},{"path":"https://molevolepid.github.io/wavess/reference/calc_tr_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate tree summary statistics — calc_tr_stats","text":"tr Rooted phylogeny timepoints Factor vector time points named tree tip label. levels ordered correctly (often sampling time). tip lables must included vector. want exclude certain tips, must drop tree prior using function. bl_thresh Branch length threshold branches collapsed prior calculations (default: 1e-08). tol argument ape::di2multi().","code":""},{"path":"https://molevolepid.github.io/wavess/reference/calc_tr_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate tree summary statistics — calc_tr_stats","text":"Tibble including 3 tree summary statistics: Mean leaf depth (normalized Sackin index) Mean branch length Mean internal branch length Mean external branch length Mean divergence (mean per-generation root--tip distance) Mean diversity (mean per-generation tip--tip distance) Divergence slope across timepoints Diversity slope across timepoints Timepoint transition score normalized number timepoints","code":""},{"path":"https://molevolepid.github.io/wavess/reference/calc_tr_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate tree summary statistics — calc_tr_stats","text":"","code":"tr <- ape::rtree(100) times <- factor(sample(3, 100, replace = TRUE), levels = 1:3) names(times) <- tr$tip.label calc_tr_stats(tr, times) #> # A tibble: 9 × 2 #>   stat_name        stat_value #>   <chr>                 <dbl> #> 1 mean_leaf_depth     8.43    #> 2 mean_bl             0.527   #> 3 mean_int_bl         0.509   #> 4 mean_ext_bl         0.544   #> 5 mean_divergence     4.22    #> 6 mean_diversity      7.00    #> 7 divergence_slope   -0.00326 #> 8 diversity_slope    -0.0413  #> 9 transition_score   22.5"},{"path":"https://molevolepid.github.io/wavess/reference/create_python_venv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create python virtual environment and dependencies in conda or virtualenv environment — create_python_venv","title":"Create python virtual environment and dependencies in conda or virtualenv environment — create_python_venv","text":"Modified spacyr::spacy_install() function: https://github.com/quanteda/spacyr/blob/master/R/spacy_install.R","code":""},{"path":"https://molevolepid.github.io/wavess/reference/create_python_venv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create python virtual environment and dependencies in conda or virtualenv environment — create_python_venv","text":"","code":"create_python_venv(ask = interactive(), force = FALSE)"},{"path":"https://molevolepid.github.io/wavess/reference/create_python_venv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create python virtual environment and dependencies in conda or virtualenv environment — create_python_venv","text":"ask logical; ask whether proceed installation. default, questions asked interactive sessions. force ignore dependencies already present install anyway.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/create_python_venv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create python virtual environment and dependencies in conda or virtualenv environment — create_python_venv","text":"dependencies python, base python packages (copy, random, collections), numpy. function checks whether suitable installation Python present system installs one via reticulate::install_python() otherwise. creates virtual environment necessary packages default location chosen reticulate::virtualenv_root(). want install different version Python default, call reticulate::install_python() directly. want create use different virtual environment, can use, e.g., Sys.setenv(WAVESS_PYTHON = \"path//directory\"). want install different version particular package, use, e.g. reticulate::virtualenv_install(packages = c(\"numpy==VERSION_NUM\")) instead.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/create_python_venv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create python virtual environment and dependencies in conda or virtualenv environment — create_python_venv","text":"","code":"if (FALSE) { # \\dontrun{ # install dependencies create_python_venv()  # update dependencies create_python_venv(force = TRUE) } # }"},{"path":"https://molevolepid.github.io/wavess/reference/define_growth_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Define active infected cell growth curve — define_growth_curve","title":"Define active infected cell growth curve — define_growth_curve","text":"Get per-generation logistic growth curve infected active cells. Note simulation run final sampling time within n_gens. See define_sampling_scheme().","code":""},{"path":"https://molevolepid.github.io/wavess/reference/define_growth_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define active infected cell growth curve — define_growth_curve","text":"","code":"define_growth_curve(   n_gens = 5000,   n0 = 10,   carry_cap = 2000,   max_growth_rate = 0.3 )"},{"path":"https://molevolepid.github.io/wavess/reference/define_growth_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define active infected cell growth curve — define_growth_curve","text":"n_gens number generations (default: 5000) n0 starting infected cell population size (default: 10) carry_cap carrying capacity number infected cells (default: 2000) max_growth_rate maximum infected cell population growth rate (default: 0.3)","code":""},{"path":"https://molevolepid.github.io/wavess/reference/define_growth_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define active infected cell growth curve — define_growth_curve","text":"tibble two columns: day active cell count","code":""},{"path":"https://molevolepid.github.io/wavess/reference/define_growth_curve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define active infected cell growth curve — define_growth_curve","text":"","code":"define_growth_curve() #> # A tibble: 5,001 × 2 #>    generation active_cell_count #>         <dbl>             <dbl> #>  1          0                10 #>  2          1                13 #>  3          2                17 #>  4          3                22 #>  5          4                29 #>  6          5                37 #>  7          6                48 #>  8          7                62 #>  9          8                80 #> 10          9               103 #> # ℹ 4,991 more rows"},{"path":"https://molevolepid.github.io/wavess/reference/define_sampling_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Define sampling scheme — define_sampling_scheme","title":"Define sampling scheme — define_sampling_scheme","text":"Define days sample sequences, many sequences sample","code":""},{"path":"https://molevolepid.github.io/wavess/reference/define_sampling_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define sampling scheme — define_sampling_scheme","text":"","code":"define_sampling_scheme(   sampling_frequency_active = 365,   max_samp_active = 20,   sampling_frequency_latent = 365,   max_samp_latent = 20,   n_days = 3650 )"},{"path":"https://molevolepid.github.io/wavess/reference/define_sampling_scheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define sampling scheme — define_sampling_scheme","text":"sampling_frequency_active frequency days record sequences active cells (counts) (default: 365 days) max_samp_active maximum number cells (thus sequences) sample active cells given day (default: 20 sequences) sampling_frequency_latent frequency days record sequences latent cells (default: 365 days) max_samp_latent maximum number cells (thus sequences) sample latent cells given day (default: 20 sequences) n_days day end sampling (default: 3650)","code":""},{"path":"https://molevolepid.github.io/wavess/reference/define_sampling_scheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define sampling scheme — define_sampling_scheme","text":"input growth curve tibble one additional column (n_sample_active) containing number sequences active cells samples","code":""},{"path":"https://molevolepid.github.io/wavess/reference/define_sampling_scheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define sampling scheme — define_sampling_scheme","text":"","code":"define_sampling_scheme() #> # A tibble: 11 × 3 #>      day n_sample_active n_sample_latent #>    <int>           <dbl>           <dbl> #>  1     0              20              20 #>  2   365              20              20 #>  3   730              20              20 #>  4  1095              20              20 #>  5  1460              20              20 #>  6  1825              20              20 #>  7  2190              20              20 #>  8  2555              20              20 #>  9  2920              20              20 #> 10  3285              20              20 #> 11  3650              20              20"},{"path":"https://molevolepid.github.io/wavess/reference/env_features.html","id":null,"dir":"Reference","previous_headings":"","what":"ENV features — env_features","title":"ENV features — env_features","text":"Binding, contact, neutralization features HIV env gene","code":""},{"path":"https://molevolepid.github.io/wavess/reference/env_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ENV features — env_features","text":"","code":"env_features"},{"path":[]},{"path":"https://molevolepid.github.io/wavess/reference/env_features.html","id":"env-features","dir":"Reference","previous_headings":"","what":"env_features","title":"ENV features — env_features","text":"tibble HIV ENV binding, contact, neutralization sites curated LANL HIV database. full ENV feature dataset subsetted include binding, contact, neutralization sites. relevant column us \"position\" column. columns included case useful specific use cases. particular data last updated 2024-10-01.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/env_features.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"ENV features — env_features","text":"https://www.hiv.lanl.gov/components/sequence/HIV/neutralization/download_db.comp","code":""},{"path":"https://molevolepid.github.io/wavess/reference/estimate_q.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate nucleotide substitution probabilities — estimate_q","title":"Calculate nucleotide substitution probabilities — estimate_q","text":", probably use set within-host sequences genome region interest.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/estimate_q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate nucleotide substitution probabilities — estimate_q","text":"","code":"estimate_q(aln, tr = NULL, model = \"GTR+R(4)+I\", rearrangement = \"none\")"},{"path":"https://molevolepid.github.io/wavess/reference/estimate_q.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate nucleotide substitution probabilities — estimate_q","text":"aln alignment class ape::DNAbin tr Starting tree model string providing model (e.g. \"GTR+G(4)+\") rearrangement Type tree rearrangements perform, one \"none\", \"NNI\", \"stochastic\" \"ratchet\" (default: \"none\")","code":""},{"path":"https://molevolepid.github.io/wavess/reference/estimate_q.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate nucleotide substitution probabilities — estimate_q","text":"Matrix nucleotide substitution probabilities. Columns rows .","code":""},{"path":"https://molevolepid.github.io/wavess/reference/estimate_q.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate nucleotide substitution probabilities — estimate_q","text":"","code":"# NOTE: This is just an example. estimate_q(hiv_env_flt_2022) #> optimize edge weights:  -13347 --> -13272.97  #> optimize rate matrix:  -13272.97 --> -12963.97  #> optimize invariant sites:  -12963.97 --> -12460.48  #> optimize free rate parameters:  -12460.48 --> -10603  #> optimize edge weights:  -10603 --> -10590.63  #> optimize rate matrix:  -10590.63 --> -10581.46  #> optimize invariant sites:  -10581.46 --> -10581.46  #> optimize free rate parameters:  -10581.46 --> -10577.81  #> optimize edge weights:  -10577.81 --> -10577.48  #> optimize rate matrix:  -10577.48 --> -10577.26  #> optimize invariant sites:  -10577.26 --> -10577.26  #> optimize free rate parameters:  -10577.26 --> -10575.89  #> optimize edge weights:  -10575.89 --> -10575.83  #> optimize rate matrix:  -10575.83 --> -10575.79  #> optimize invariant sites:  -10575.79 --> -10575.79  #> optimize free rate parameters:  -10575.79 --> -10575.18  #> optimize edge weights:  -10575.18 --> -10575.16  #> optimize rate matrix:  -10575.16 --> -10575.14  #> optimize invariant sites:  -10575.14 --> -10575.14  #> optimize free rate parameters:  -10575.14 --> -10574.92  #> optimize edge weights:  -10574.92 --> -10574.91  #> optimize rate matrix:  -10574.91 --> -10574.91  #> optimize invariant sites:  -10574.91 --> -10574.91  #> optimize free rate parameters:  -10574.91 --> -10574.84  #> optimize edge weights:  -10574.84 --> -10574.84  #> optimize rate matrix:  -10574.84 --> -10574.83  #> optimize invariant sites:  -10574.83 --> -10574.83  #> optimize free rate parameters:  -10574.83 --> -10574.82  #> optimize edge weights:  -10574.82 --> -10574.81  #> optimize rate matrix:  -10574.81 --> -10574.81  #> optimize invariant sites:  -10574.81 --> -10574.81  #> optimize free rate parameters:  -10574.81 --> -10574.81  #> optimize edge weights:  -10574.81 --> -10574.81  #> optimize rate matrix:  -10574.81 --> -10574.81  #> optimize invariant sites:  -10574.81 --> -10574.81  #> optimize free rate parameters:  -10574.81 --> -10574.8  #> optimize edge weights:  -10574.8 --> -10574.8  #> optimize rate matrix:  -10574.8 --> -10574.8  #> optimize invariant sites:  -10574.8 --> -10574.8  #> optimize free rate parameters:  -10574.8 --> -10574.8  #> optimize edge weights:  -10574.8 --> -10574.8  #> optimize rate matrix:  -10574.8 --> -10574.8  #> optimize invariant sites:  -10574.8 --> -10574.8  #> optimize free rate parameters:  -10574.8 --> -10574.8  #> optimize edge weights:  -10574.8 --> -10574.8  #>            A          C          G          T #> A -1.5940889  0.3894774  1.0395679  0.1650437 #> C  0.7692561 -2.0446348  0.1948555  1.0805232 #> G  1.5490726  0.1470087 -1.9302494  0.2341682 #> T  0.2459336  0.8152003  0.2341682 -1.2953020"},{"path":"https://molevolepid.github.io/wavess/reference/extract_seqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract founder (and reference) sequence from an alignment — extract_seqs","title":"Extract founder (and reference) sequence from an alignment — extract_seqs","text":"Extract founder (reference) sequence alignment","code":""},{"path":"https://molevolepid.github.io/wavess/reference/extract_seqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract founder (and reference) sequence from an alignment — extract_seqs","text":"","code":"extract_seqs(aln, founder_name, ref_name = NULL, start = 1, end = NULL)"},{"path":"https://molevolepid.github.io/wavess/reference/extract_seqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract founder (and reference) sequence from an alignment — extract_seqs","text":"aln alignment founder_name Name founder sequence alignment ref_name Optional name reference sequence alignment. can used input ref_seq argument run_wavess() (default: NULL, .e. reference sequence returned) start start position alignment end end position alignment","code":""},{"path":"https://molevolepid.github.io/wavess/reference/extract_seqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract founder (and reference) sequence from an alignment — extract_seqs","text":"List founder sequence optional reference sequence character strings","code":""},{"path":"https://molevolepid.github.io/wavess/reference/extract_seqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract founder (and reference) sequence from an alignment — extract_seqs","text":"","code":"extract_seqs(hxb2_cons_founder, \"B.US.2011.DEMB11US006.KC473833\",   start = 6225, end = 7787 ) #> $founder #> [1] \"ATGAGAGCGATGGGGATCATGAGGAATTGGCAACACTTGTGGAGATGGGGCATGATGCTCCTTGGGATGTTGATGATCTGTAATGCTACAGACAACTTGTGGGTCACAGTCTATTATGGGGTACCTGTGTGGAGGGAAGCAAACACAACTCTATTTTGTGCATCAGATGCTAAAGCATATGAGACAGAGGTACATAATGTTTGGGCCACACATGCCTGTGTACCCACAGACCCCAACCCACAAGAAGTAAAATTGGGAAATGTGACAGAAAATTTTAATGCATGGAAAAATGACATGGTAGAACAGATGCATGAGGATATAATCAGTCTATGGGATCAAAGCCTAAAGCCATGTGTAAGATTAACCCCACTCTGTGTTACTCTAAATTGCACTGATCTTAATGCCACTAGCATTGGTAGTAACATGACACTGAAGGGAGAAATAAAAAATTGCACTTTCAATATCACCACAAGTAAAAACGATAAAAAGACAACAGAACGTGCATATTTTAATAGACTTGATGTGGTACCAATGGATGATAATAGTAGTAGTAGTACTAGTTATAGGTTGATAAGTTGTAACACCTCAGTCATTACACATGCCTGCCCAAAGGTATCCTTTGAGCCAATTCCCATACATTATTGTGCCCCAGCTGGTTTTGCGATTCTAAAGTGTAATGATAAAAAATTTAATGGAAAAGGACTATGTAAAAATGTCAGCACAGTACAATGTACACATGGAATTAGACCAGTAGTATCAACTCAACTGTTGCTGAATGGCAGTCTAGCAGAAGAAGAAGTAGTAATTAGATCTGAAAATATCTCTAACAATGCCAAAACCATAATAGTACATCTGAAGGAATCTGTACAAATTATTTGTGTAAGACCCAACAACAATACAAGACAAGGTATACATATGGGACCAGGAAGGACATTTTATACAACAGGGGGGATAATAGGAGATATAAGGCAAGCATATTGTAACATTAGTAGGGCAGAATGGACTAACACTCTAGGAAAGATAGTTGGAAAATTAAGAGAACGATTTAATAAAACAATAATCTTTAATCATTCCTCAGGAGGGGACCTAGAAATTGTGACACACAGTTTTAATTGTGGAGGGGAATTTTTCTACTGCAATACATCAGCACTGTTTAATAGTACTTGGAATAGTACTATAAATACAAGTGAAAATGACACAATCATACTCCCATGCAGAATAAAACAAATTATAAATCTGTGGCAGGAAGTAGGAAGAGCAATGTATGCTCCTCCCATCAGGGGAAACATTAGCTGTACATCAAATATTACGGGGGTGCTATTAACAAGAGATGGTGGCGATGACCCTAACGGGACCAACGACACCGAGACCTTCAGACCTGGAGGAGGAGATATGAGGGACAATTGGAGAAATGAATTGTATAAATACAAAGTAGTAAAAATTGAACCATTGGGAATAGCACCCACCAGGGCAAAGAGAAGAGTGGTGCAAAGAGAAAAAAGA\" #>  #> $ref #> NULL #>  extract_seqs(hxb2_cons_founder,   \"B.US.2011.DEMB11US006.KC473833\", \"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\",   start = 6225, end = 7787 ) #> $founder #> [1] \"ATGAGAGCGATGGGGATCATGAGGAATTGGCAACACTTGTGGAGATGGGGCATGATGCTCCTTGGGATGTTGATGATCTGTAATGCTACAGACAACTTGTGGGTCACAGTCTATTATGGGGTACCTGTGTGGAGGGAAGCAAACACAACTCTATTTTGTGCATCAGATGCTAAAGCATATGAGACAGAGGTACATAATGTTTGGGCCACACATGCCTGTGTACCCACAGACCCCAACCCACAAGAAGTAAAATTGGGAAATGTGACAGAAAATTTTAATGCATGGAAAAATGACATGGTAGAACAGATGCATGAGGATATAATCAGTCTATGGGATCAAAGCCTAAAGCCATGTGTAAGATTAACCCCACTCTGTGTTACTCTAAATTGCACTGATCTTAATGCCACTAGCATTGGTAGTAACATGACACTGAAGGGAGAAATAAAAAATTGCACTTTCAATATCACCACAAGTAAAAACGATAAAAAGACAACAGAACGTGCATATTTTAATAGACTTGATGTGGTACCAATGGATGATAATAGTAGTAGTAGTACTAGTTATAGGTTGATAAGTTGTAACACCTCAGTCATTACACATGCCTGCCCAAAGGTATCCTTTGAGCCAATTCCCATACATTATTGTGCCCCAGCTGGTTTTGCGATTCTAAAGTGTAATGATAAAAAATTTAATGGAAAAGGACTATGTAAAAATGTCAGCACAGTACAATGTACACATGGAATTAGACCAGTAGTATCAACTCAACTGTTGCTGAATGGCAGTCTAGCAGAAGAAGAAGTAGTAATTAGATCTGAAAATATCTCTAACAATGCCAAAACCATAATAGTACATCTGAAGGAATCTGTACAAATTATTTGTGTAAGACCCAACAACAATACAAGACAAGGTATACATATGGGACCAGGAAGGACATTTTATACAACAGGGGGGATAATAGGAGATATAAGGCAAGCATATTGTAACATTAGTAGGGCAGAATGGACTAACACTCTAGGAAAGATAGTTGGAAAATTAAGAGAACGATTTAATAAAACAATAATCTTTAATCATTCCTCAGGAGGGGACCTAGAAATTGTGACACACAGTTTTAATTGTGGAGGGGAATTTTTCTACTGCAATACATCAGCACTGTTTAATAGTACTTGGAATAGTACTATAAATACAAGTGAAAATGACACAATCATACTCCCATGCAGAATAAAACAAATTATAAATCTGTGGCAGGAAGTAGGAAGAGCAATGTATGCTCCTCCCATCAGGGGAAACATTAGCTGTACATCAAATATTACGGGGGTGCTATTAACAAGAGATGGTGGCGATGACCCTAACGGGACCAACGACACCGAGACCTTCAGACCTGGAGGAGGAGATATGAGGGACAATTGGAGAAATGAATTGTATAAATACAAAGTAGTAAAAATTGAACCATTGGGAATAGCACCCACCAGGGCAAAGAGAAGAGTGGTGCAAAGAGAAAAAAGA\" #>  #> $ref #> [1] \"ATGAGAGTGAAGG---------AGAAATATCAGCACTTGTGGAGATGGGGCACCATGCTCCTTGGGATGTTGATGATCTGTAGTGCTACAGAAAAATTGTGGGTCACAGTCTATTATGGGGTACCTGTGTGGAAGGAAGCAACCACCACTCTATTTTGTGCATCAGATGCTAAAGCATATGATACAGAGGTACATAATGTTTGGGCCACACATGCCTGTGTACCCACAGACCCCAACCCACAAGAAGTAGTATTGGTAAATGTGACAGAAAATTTTAACATGTGGAAAAATGACATGGTAGAACAGATGCATGAGGATATAATCAGTTTATGGGATCAAAGCCTAAAGCCATGTGTAAAATTAACCCCACTCTGTGTTAGTTTAAAGTGCACTGATTTTAATACCAATAGTAGTAGCGGGAGAATGATAATGAAAGGAGAGATAAAAAACTGCTCTTTCAATATCAGCACAAGCATAAGAGGTAAGGTGCAGAAAGAATATGCATTTTTTTATAAACTTGATATAATACCAATAGATAATGA---------TACTACCAGCTATAAGTTGACAAGTTGTAACACCTCAGTCATTACACAGGCCTGTCCAAAGGTATCCTTTGAGCCAATTCCCATACATTATTGTGCCCCGGCTGGTTTTGCGATTCTAAAATGTAATAATAAGACGTTCAATGGAACAGGACCATGTACAAATGTCAGCACAGTACAATGTACACATGGAATTAGGCCAGTAGTATCAACTCAACTGCTGTTAAATGGCAGTCTAGCAGAAGAAGAGGTAGTAATTAGATCTGTCAATTTCACGGACAATGCTAAAACCATAATAGTACAGCTGAACACATCTGTAGAAATTAATTGTACAAGACCCAACAACAATACAAGAAAAAGAATCCGTATAGGACCAGGGAGAGCATTTGTTACAATAGGAAA---AATAGGAAATATGAGACAAGCACATTGTAACATTAGTAGAGCAAAATGGAATAACACTTTAAAACAGATAGCTAGCAAATTAAGAGAACAATTTAATAAAACAATAATCTTTAAGCAATCCTCAGGAGGGGACCCAGAAATTGTAACGCACAGTTTTAATTGTGGAGGGGAATTTTTCTACTGTAATTCAACACAACTGTTTAATAGTACTTGGTTTAATAGTAATAACACTGAAGGAAGTGACACAATCACCCTCCCATGCAGAATAAAACAAATTATAAACATGTGGCAGAAAGTAGGAAAAGCAATGTATGCCCCTCCCATCAGTGGACAAATTAGATGTTCATCAAATATTACAGGGCTGCTATTAACAAGAGATGGTGGTAA------TAGCAAC---AATGAGTCCGAGATCTTCAGACCTGGAGGAGGAGATATGAGGGACAATTGGAGAAGTGAATTATATAAATATAAAGTAGTAAAAATTGAACCATTAGGAGTAGCACCCACCAAGGCAAAGAGAAGAGTGGTGCAGAGAGAAAAAAGA\" #>"},{"path":"https://molevolepid.github.io/wavess/reference/founder_conserved_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Example founder conserved sites — founder_conserved_sites","title":"Example founder conserved sites — founder_conserved_sites","text":"Conserved sites (indexed 1) gp120 DEMB11US006 sequence, used example founder sequence throughout package. sites identified using identify_conserved_sites() function full HIV ENV filtered alignment LANL HIV database. See hiv_env_flt_2022 details link entire alignment.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/founder_conserved_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example founder conserved sites — founder_conserved_sites","text":"","code":"founder_conserved_sites"},{"path":[]},{"path":"https://molevolepid.github.io/wavess/reference/founder_conserved_sites.html","id":"founder-conserved-sites","dir":"Reference","previous_headings":"","what":"founder_conserved_sites","title":"Example founder conserved sites — founder_conserved_sites","text":"Vector conserved nucleotides gp120 gene DEMB11US006 (founder), named sequence position (indexed 0)","code":""},{"path":"https://molevolepid.github.io/wavess/reference/founder_conserved_sites.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example founder conserved sites — founder_conserved_sites","text":"Full alignment used: https://www.hiv.lanl.gov/content/sequence/NEWALIGN/align.html Founder sequence: https://www.sciencedirect.com/science/article/pii/S0022175914000143?via%3Dihub https://www.hiv.lanl.gov/components/sequence/HIV/asearch/query_one.comp?se_id=KC473833","code":""},{"path":"https://molevolepid.github.io/wavess/reference/get_epitope_frequencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get epitope frequencies — get_epitope_frequencies","title":"Get epitope frequencies — get_epitope_frequencies","text":"Get epitope frequencies","code":""},{"path":"https://molevolepid.github.io/wavess/reference/get_epitope_frequencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get epitope frequencies — get_epitope_frequencies","text":"","code":"get_epitope_frequencies(epitope_positions)"},{"path":"https://molevolepid.github.io/wavess/reference/get_epitope_frequencies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get epitope frequencies — get_epitope_frequencies","text":"epitope_positions numeric vector amino acid positions identified epitopes (e.g. env features LANL HIV database)","code":""},{"path":"https://molevolepid.github.io/wavess/reference/get_epitope_frequencies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get epitope frequencies — get_epitope_frequencies","text":"tibble following columns: aa_position: amino acid position n_features: number features position epitope_probability: estimated probability epitope position","code":""},{"path":"https://molevolepid.github.io/wavess/reference/get_epitope_frequencies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get epitope frequencies — get_epitope_frequencies","text":"","code":"get_epitope_frequencies(env_features$Position - 1) # subtract 1 to index at 0 #> # A tibble: 480 × 3 #>    aa_position n_features epitope_probability #>          <dbl>      <dbl>               <dbl> #>  1          30          1            0.000331 #>  2          31          0            0        #>  3          32          0            0        #>  4          33          0            0        #>  5          34          0            0        #>  6          35          0            0        #>  7          36          0            0        #>  8          37          0            0        #>  9          38          0            0        #> 10          39          0            0        #> # ℹ 470 more rows"},{"path":"https://molevolepid.github.io/wavess/reference/hiv_env_flt_2022.html","id":null,"dir":"Reference","previous_headings":"","what":"HIV1 ENV alignment — hiv_env_flt_2022","title":"HIV1 ENV alignment — hiv_env_flt_2022","text":"2022 HIV1 ENV FLT web alignment LANL HIV database","code":""},{"path":"https://molevolepid.github.io/wavess/reference/hiv_env_flt_2022.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HIV1 ENV alignment — hiv_env_flt_2022","text":"","code":"hiv_env_flt_2022"},{"path":[]},{"path":"https://molevolepid.github.io/wavess/reference/hiv_env_flt_2022.html","id":"hiv-env-flt-","dir":"Reference","previous_headings":"","what":"hiv_env_flt_2022","title":"HIV1 ENV alignment — hiv_env_flt_2022","text":"ape DNAbin object 10 DNA sequences length 3993. like download entire set 6,741 sequences, please visit link .","code":""},{"path":"https://molevolepid.github.io/wavess/reference/hiv_env_flt_2022.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"HIV1 ENV alignment — hiv_env_flt_2022","text":"https://www.hiv.lanl.gov/content/sequence/NEWALIGN/align.html","code":""},{"path":"https://molevolepid.github.io/wavess/reference/hiv_mut_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"HIV nucleotide-specific mutation rates at approximately neutral sites — hiv_mut_rates","title":"HIV nucleotide-specific mutation rates at approximately neutral sites — hiv_mut_rates","text":"HIV nucleotide-specific mutation rates approximately neutral sites","code":""},{"path":"https://molevolepid.github.io/wavess/reference/hiv_mut_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HIV nucleotide-specific mutation rates at approximately neutral sites — hiv_mut_rates","text":"","code":"hiv_mut_rates"},{"path":[]},{"path":"https://molevolepid.github.io/wavess/reference/hiv_mut_rates.html","id":"hiv-mut-rates","dir":"Reference","previous_headings":"","what":"hiv_mut_rates","title":"HIV nucleotide-specific mutation rates at approximately neutral sites — hiv_mut_rates","text":"matrix per-site per-day individual nucleotide rates change nucleotides, rows \"\" nucleotide columns \"\" nucleotide.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/hiv_mut_rates.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"HIV nucleotide-specific mutation rates at approximately neutral sites — hiv_mut_rates","text":"Zanini et al. 2017: https://doi.org/10.1093/ve/vex003","code":""},{"path":"https://molevolepid.github.io/wavess/reference/hxb2_cons_founder.html","id":null,"dir":"Reference","previous_headings":"","what":"HXB2, consensus, and founder alignment — hxb2_cons_founder","title":"HXB2, consensus, and founder alignment — hxb2_cons_founder","text":"Full-genome alignment HXB2, consensus sequence, DEMB11US006 (founder)","code":""},{"path":"https://molevolepid.github.io/wavess/reference/hxb2_cons_founder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HXB2, consensus, and founder alignment — hxb2_cons_founder","text":"","code":"hxb2_cons_founder"},{"path":[]},{"path":"https://molevolepid.github.io/wavess/reference/hxb2_cons_founder.html","id":"hxb-cons-founder","dir":"Reference","previous_headings":"","what":"hxb2_cons_founder","title":"HXB2, consensus, and founder alignment — hxb2_cons_founder","text":"ape DNAbin object 3 DNA sequences length 1563 including full-genome sequence HXB2, consensus sequence, DEMB11US006 (founder)","code":""},{"path":"https://molevolepid.github.io/wavess/reference/hxb2_cons_founder.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"HXB2, consensus, and founder alignment — hxb2_cons_founder","text":"HXB2 consensus (1st 2 sequences): https://www.hiv.lanl.gov/content/sequence/NEWALIGN/align.html Founder: https://www.sciencedirect.com/science/article/pii/S0022175914000143?via%3Dihub https://www.hiv.lanl.gov/components/sequence/HIV/asearch/query_one.comp?se_id=KC473833","code":""},{"path":"https://molevolepid.github.io/wavess/reference/identify_conserved_sites.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify conserved sites — identify_conserved_sites","title":"Identify conserved sites — identify_conserved_sites","text":"Identify conserved sites relative founder sequence. Note positions returned assume start alignment also start founder sequence simulation.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/identify_conserved_sites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify conserved sites — identify_conserved_sites","text":"","code":"identify_conserved_sites(   aln,   founder,   thresh = 0.99,   ref = NULL,   founder_aln = NULL )"},{"path":"https://molevolepid.github.io/wavess/reference/identify_conserved_sites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify conserved sites — identify_conserved_sites","text":"aln Alignment ape::DNAbin format (e.g. read ape::read.dna() ape::read.FASTA()) includes founder sequence reference sequence, plus representative set sequences genome region interest founder Name founder sequence input alignment optional founder-specific alignment (founder_aln) thresh Conserved site threshold. position considered conserved >thresh proportion sequences alignment base (default: 0.99) ref Name reference sequence input alignment, required founder sequence aln (default: NULL) founder_aln Alignment including reference founder sequences, required founder present aln. NOTE: alignment aln assumed begin position reference sequence (default: NULL)","code":""},{"path":"https://molevolepid.github.io/wavess/reference/identify_conserved_sites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify conserved sites — identify_conserved_sites","text":"Tibble including following columns: founder_pos: founder position founder_base: founder base consensus_base: consensus base consensus_prop: proportion sequences base position conserved: whether position conserved (Yes means conserved, means conserved, NA means conserved position gap ('-')) using reference, NA consensus columns indicates position insertion relative reference. positions indexed 0.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/identify_conserved_sites.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify conserved sites — identify_conserved_sites","text":"","code":"gp120_flt_2022 <- slice_aln(hiv_env_flt_2022, start = 1, end = 2517) gp120_hxb2_cons_founder <- slice_aln(hxb2_cons_founder, start = 6225, end = 7757) identify_conserved_sites(   gp120_flt_2022,   \"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\" ) #> # A tibble: 1,023 × 5 #>    founder_pos founder_base consensus_base consensus_prop conserved #>          <dbl> <chr>        <chr>                   <dbl> <chr>     #>  1           0 a            a                         1   Yes       #>  2           1 t            t                         1   Yes       #>  3           2 g            g                         1   Yes       #>  4           3 a            a                         1   Yes       #>  5           4 g            g                         1   Yes       #>  6           5 a            a                         1   Yes       #>  7           6 g            g                         1   Yes       #>  8           7 t            t                         0.8 No        #>  9           8 g            g                         1   Yes       #> 10           9 a            a                         1   Yes       #> # ℹ 1,013 more rows identify_conserved_sites(gp120_flt_2022,   \"B.US.2011.DEMB11US006.KC473833\",   ref = \"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\",   founder_aln = gp120_hxb2_cons_founder ) #> # A tibble: 1,473 × 5 #>    founder_pos founder_base consensus_base consensus_prop conserved #>          <dbl> <chr>        <chr>                   <dbl> <chr>     #>  1           0 a            a                         1   Yes       #>  2           1 t            t                         1   Yes       #>  3           2 g            g                         1   Yes       #>  4           3 a            a                         1   Yes       #>  5           4 g            g                         1   Yes       #>  6           5 a            a                         1   Yes       #>  7           6 g            g                         1   Yes       #>  8           7 c            t                         0.8 No        #>  9           8 g            g                         1   Yes       #> 10           9 a            a                         1   Yes       #> # ℹ 1,463 more rows"},{"path":"https://molevolepid.github.io/wavess/reference/map_ref_founder.html","id":null,"dir":"Reference","previous_headings":"","what":"Map reference and founder sequence positions — map_ref_founder","title":"Map reference and founder sequence positions — map_ref_founder","text":"Map reference founder sequence positions","code":""},{"path":"https://molevolepid.github.io/wavess/reference/map_ref_founder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map reference and founder sequence positions — map_ref_founder","text":"","code":"map_ref_founder(aln, ref, founder)"},{"path":"https://molevolepid.github.io/wavess/reference/map_ref_founder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map reference and founder sequence positions — map_ref_founder","text":"aln Alignment ape::DNAbin format (e.g. read ape::read.dna() ape::read.FASTA()) includes reference sequence founder sequence ref Name reference sequence input alignment founder Name founder sequence input alignment","code":""},{"path":"https://molevolepid.github.io/wavess/reference/map_ref_founder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map reference and founder sequence positions — map_ref_founder","text":"Tibble including columns : Alignment position (alignment_pos) Reference base position (ref_pos) Founder base position (founder_pos) Reference base (ref_base) Founder base (founder_base) positions indexed 0.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/map_ref_founder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map reference and founder sequence positions — map_ref_founder","text":"","code":"map_ref_founder(   hxb2_cons_founder,   \"B.FR.83.HXB2_LAI_IIIB_BRU.K03455\",   \"B.US.2011.DEMB11US006.KC473833\" ) #> # A tibble: 9,022 × 5 #>    alignment_pos ref_pos founder_pos ref_base founder_base #>            <dbl>   <dbl>       <dbl> <chr>    <chr>        #>  1           646     646           0 c        c            #>  2           647     647           1 a        a            #>  3           648     648           2 g        g            #>  4           649     649           3 g        g            #>  5           650     650           4 g        g            #>  6           651     651           5 a        a            #>  7           652     652           6 c        c            #>  8           653     653           7 c        t            #>  9           654     654           8 t        t            #> 10           655     655           9 g        g            #> # ℹ 9,012 more rows"},{"path":"https://molevolepid.github.io/wavess/reference/remove_python_venv.html","id":null,"dir":"Reference","previous_headings":"","what":"Uninstall the wavess environment — remove_python_venv","title":"Uninstall the wavess environment — remove_python_venv","text":"Removes virtual environment created create_python_venv()","code":""},{"path":"https://molevolepid.github.io/wavess/reference/remove_python_venv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uninstall the wavess environment — remove_python_venv","text":"","code":"remove_python_venv(confirm = interactive())"},{"path":"https://molevolepid.github.io/wavess/reference/remove_python_venv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uninstall the wavess environment — remove_python_venv","text":"confirm logical; confirm uninstalling wavess virtual environment?","code":""},{"path":"https://molevolepid.github.io/wavess/reference/run_wavess.html","id":null,"dir":"Reference","previous_headings":"","what":"Run wavess — run_wavess","title":"Run wavess — run_wavess","text":"Simulate within-host evolution optionally including recombination (default: ), latency (default: ), fitness costs (default: ). three fitness costs can simulated conserved sites, fitness relative reference sequence, antibody-based immune fitness costs. Nucleotide positions conserved immune fitness expected indexed 0. Please note default arguments set HIV env gp120 gene mind. like simulate something else, likely modify certain parameters. However, interested gene particular, can probably use defaults including founder reference sequences provided examples. However, default fitness costs modeled. recommend including fitness obtain realistic model output. model , can use pre-processing functions (see vignette('prepare_input_data')) generate relevant inputs. Also, parameters latent probabilities assumed small, unlikely multiple events (activate, die, proliferate) occur single latent cell single (active cell) generation. See vignette('run_wavess') details simulator input arguments.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/run_wavess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run wavess — run_wavess","text":"","code":"run_wavess(   inf_pop_size,   samp_scheme,   founder_seqs,   generation_time = 1,   mut_rate = 3e-05,   q = wavess::calc_q_from_rates(wavess::hiv_mut_rates, mut_rate, generation_time),   recomb_rate = 1.4e-05,   act_to_lat = 0.001,   lat_to_act = 0.01,   lat_prolif = 0.01,   lat_die = 0.01,   conserved_sites = NULL,   conserved_cost = 0.99,   ref_seq = NULL,   replicative_cost = 0.001,   epitope_locations = NULL,   n_for_imm = 100,   days_full_potency = 90,   immune_start_day = 0,   seed = NULL )"},{"path":"https://molevolepid.github.io/wavess/reference/run_wavess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run wavess — run_wavess","text":"inf_pop_size Tibble columns generation (starting day 0) active_cell_count. Note initial active cell population size day 0 must number input founder sequences (simply input founder sequences).  Can generated using define_growth_curve() function. samp_scheme Tibble columns day n_sample_active. Rows need contain days sampling occurrs. Can generated using define_sampling_scheme() function. founder_seqs Founder sequence(s) character string vector character strings, example 'ACATG'. founder sequence(s) may contain characters ACGT, gaps allowed. modeling immune fitness, expected codon-aligned. generation_time Amount time days takes virus complete one full life cycle, infecting one cell exiting cell infecting next one (default: 1 day). inputs days converted generations using number. mut_rate Mutation rate per-site, per-generation (default: 3.0e-5) q Nucleotide substitution rate matrix Q rows columns named nucleotides ACGT. Rows , columns . Can generated using estimate_q() function. default calculate Q matrix using estimates per-day rates nearly neutral sites: wavess::calc_q_from_rates(wavess::hiv_mut_rates,mut_rate,generation_time). recomb_rate Recombination rate per-site, per-generation (default: 1.4e-5) act_to_lat Per-day rate active cell becomes latent (default: 0.001). Set 0 want model latent cell dynamics. lat_to_act Per-day rate latent cell becomes active (default: 0.01) lat_prolif Per-day rate latent cell proliferates (default: 0.01) lat_die Per-day rate latent cell dies (default: 0.01) conserved_sites Vector conserved bases named position founder sequence (indexed 0). can generated using identify_conserved_sites() function (default: NULL, .e. conserved sites fitness costs) conserved_cost Cost mutation conserved site, must range [0,1) 0 indicates cost. 1, indicates ability survive, allowed (default: 0.99) ref_seq Reference sequence character string, denotes \"fit\" virus replicative perspective. consensus sequence, can used reference sequence, can generated using function identify_conserved_sites() (default: NULL, .e. fitness cost relative reference sequence) replicative_cost Replicative fitness cost, relevant ref_seq NULL, must range [0,1) 0 indicates cost. 1, indicates ability survive, allowed (default: 0.001) epitope_locations Tibble epitope locations maximum fitness costs columns epi_start_nt, epi_end_nt, max_fitness_cost. epitopes expected indexed 0 protein correct reading frame, nucleotide sequences translated amino acids calculate immune fitness cost. maximum fitness cost must range [0,1) 0 indicates cost. 1, indicates ability survive. epitope location tibble can generated using functions get_epitope_frequencies() sample_epitopes(). (default: NULL, .e. immune fitness costs) n_for_imm Number infected cells must contain given sequence sequence recognized immune system, relevant epitope_locations NULL (default: 100). days_full_potency Number days takes immune response epitope reach full potency, relevant epitope_locations NULL (default: 90). immune_start_day Day start checking immune response, relevant epitope_locations NULL (default: 0, note immune response actually start least n_for_imm cells active population). seed Optional seed (default: NULL)","code":""},{"path":"https://molevolepid.github.io/wavess/reference/run_wavess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run wavess — run_wavess","text":"List including: tibble counts mean fitness values, alignment sampled sequences, fitness sampled sequences. latent cells sampled, alignment sampled latent cells also returned.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/run_wavess.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run wavess — run_wavess","text":"Also note inputs expected units generations expected units days. choices made based empirical estimates often estimated present literature. highlighted parameter descriptions inputs .","code":""},{"path":"https://molevolepid.github.io/wavess/reference/run_wavess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run wavess — run_wavess","text":"","code":"if (FALSE) { # \\dontrun{ run_wavess(   define_growth_curve(n_gen = 50),   define_sampling_scheme(     sampling_frequency_active = 10,     sampling_frequency_latent = 10, n_days = 50   ),   rep(\"ATCG\", 10) ) } # }"},{"path":"https://molevolepid.github.io/wavess/reference/sample_epitopes.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample epitopes — sample_epitopes","title":"Sample epitopes — sample_epitopes","text":"Sample epitopes based epitope probabilities. Note positions returned assume start amino acid sequence also start founder sequence simulation. also assume frameshift mutations founder sequence.","code":""},{"path":"https://molevolepid.github.io/wavess/reference/sample_epitopes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample epitopes — sample_epitopes","text":"","code":"sample_epitopes(   epitope_probabilities,   start_aa_pos = 0,   end_aa_pos = NULL,   num_epitopes = 10,   aa_epitope_length = 10,   max_fit_cost = 0.3,   max_resamples = 100,   ref_founder_map = NULL )"},{"path":"https://molevolepid.github.io/wavess/reference/sample_epitopes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample epitopes — sample_epitopes","text":"epitope_probabilities Epitope probability tibble output get_epitope_frequencies(), including columns aa_position epitope_probability. aa_position indexed 0 start_aa_pos Starting amino acid position consider epitopes, indexed 0 (default: 0, .e. first position) end_aa_pos Ending amino acid position consider epitopes, indexed 0 (default: NULL, .e. final position epitope_probabilities$aa_position) num_epitopes Number epitopes sample aa_epitope_length Amino acid epitope length max_fit_cost Maximum fitness cost epitope, must range [0,1) 0 indicates cost. 1, indicates ability survive, allowed (default: 0.3) note model output sensitive parameter max_resamples Maximum number resampling events attempt; prevent infinite loop (default: 100) ref_founder_map Output map_ref_founder(), including nucleotide reference founder positions (ref_pos founder_pos). NOTE: reference positions , converted amino acid positions, expected match reference positions epitope_probabilities. , assume founder indices align founder sequence positions used simulation (default: NULL)","code":""},{"path":"https://molevolepid.github.io/wavess/reference/sample_epitopes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample epitopes — sample_epitopes","text":"tibble num_epitopes rows following columns: epi_start_nt: nucleotide epitope start position epi_end_nt: nucleotide epitope end position max_fitness_cost: maximum fitness cost epitope","code":""},{"path":"https://molevolepid.github.io/wavess/reference/sample_epitopes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample epitopes — sample_epitopes","text":"","code":"sample_epitopes(get_epitope_frequencies(env_features$Position - 1)) #> 2 resamples required #> # A tibble: 10 × 3 #>    epi_start_nt epi_end_nt max_fitness_cost #>           <dbl>      <dbl>            <dbl> #>  1          273        303             0.03 #>  2          486        516             0.06 #>  3          909        939             0.09 #>  4          384        414             0.12 #>  5          456        486             0.15 #>  6          702        732             0.18 #>  7         1173       1203             0.21 #>  8         1251       1281             0.24 #>  9         1092       1122             0.27 #> 10          984       1014             0.3"},{"path":"https://molevolepid.github.io/wavess/reference/slice_aln.html","id":null,"dir":"Reference","previous_headings":"","what":"Slice alignment — slice_aln","title":"Slice alignment — slice_aln","text":"Slice alignment","code":""},{"path":"https://molevolepid.github.io/wavess/reference/slice_aln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slice alignment — slice_aln","text":"","code":"slice_aln(aln, start, end, seqs = labels(aln))"},{"path":"https://molevolepid.github.io/wavess/reference/slice_aln.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slice alignment — slice_aln","text":"aln alignment start start position alignment end end position alignment seqs sequences keep (default: labels(aln), .e. sequences)","code":""},{"path":"https://molevolepid.github.io/wavess/reference/slice_aln.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slice alignment — slice_aln","text":"sliced alignment ape::DNAbin format","code":""},{"path":"https://molevolepid.github.io/wavess/reference/slice_aln.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slice alignment — slice_aln","text":"","code":"slice_aln(hxb2_cons_founder, 1, 100) #> 3 DNA sequences in binary format stored in a matrix. #>  #> All sequences of same length: 100  #>  #> Labels: #> B.FR.83.HXB2_LAI_IIIB_BRU.K03455 #> CON_B(1295) #> B.US.2011.DEMB11US006.KC473833 #>  #> Base composition: #>    a    c    g    t  #> 0.32 0.28 0.19 0.21  #> (Total: 300 bases)"},{"path":"https://molevolepid.github.io/wavess/reference/wavess-package.html","id":null,"dir":"Reference","previous_headings":"","what":"wavess: Within-Host Agent-Based Viral Evolution Sequence Simulator — wavess-package","title":"wavess: Within-Host Agent-Based Viral Evolution Sequence Simulator — wavess-package","text":"Simulates within-host viral sequence evolution. Optionally includes recombination, latent cell reservoir, three types selective pressures (conserved sites, comparison \"fit\" sequence, adaptive B-cell immunity).","code":""},{"path":"https://molevolepid.github.io/wavess/reference/wavess-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"wavess: Within-Host Agent-Based Viral Evolution Sequence Simulator — wavess-package","text":"Maintainer: Zena Lapp zenalapp@lanl.gov (ORCID) Authors: Narmada Sambaturu narmada.sambaturu@gmail.com (ORCID) contributors: Kenneth Benoit (ORCID) (python install) [copyright holder] Akitaka Matsuo (ORCID) (python install) [copyright holder] Johannes Gruber (ORCID) (python install) [copyright holder]","code":""},{"path":"https://molevolepid.github.io/wavess/news/index.html","id":"wavess-development-version","dir":"Changelog","previous_headings":"","what":"wavess (development version)","title":"wavess (development version)","text":"Initial version.","code":""}]
